require('dotenv').config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.JWT_SECRET) {
  console.error('‚ùå Fatal error: JWT_SECRET is not defined in .env file');
  process.exit(1);
}

const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const db = require('./models');

const app = express();
const PORT = process.env.PORT || 3001;

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
  console.log('üìÅ Created uploads directory');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors({
  origin: ['http://localhost:5173', 'http://localhost:3000'],
  credentials: true
}));

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${req.method} ${req.path}`);
  next();
});

async function startServer() {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.sequelize.authenticate();
    console.log('‚úÖ Database connection established');

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (process.env.NODE_ENV === 'development') {
      try {
        await db.sequelize.sync({ alter: true });
        console.log('üîÑ Database models synced');
      } catch (syncError) {
        console.warn('‚ö†Ô∏è  Database sync warning:', syncError.message);
      }
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ—É—Ç—ã
    const departmentRoutes = require('./department/departmentRoutes');
    const userRoutes = require('./users/userRoutes');
    const assignmentRoutes = require('./assignments/assignmentRoutes');
    const taskRoutes = require('./tasks/taskRoutes');
    const techCardRoutes = require('./techCards/techCardRoutes');
    const productionPlanRoutes = require('./productionPlans/productionPlanRoutes');

    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
    app.use('/api/departments', departmentRoutes);
    app.use('/api/users', userRoutes);
    app.use('/api/assignments', assignmentRoutes);
    app.use('/api/tasks', taskRoutes);
    app.use('/api/techcards', techCardRoutes);
    app.use('/api/productionPlans', productionPlanRoutes);

    console.log('üîó API routes registration completed');

    // –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
    app.get('/api/health', (req, res) => {
      res.json({ 
        status: 'OK',
        database: db.sequelize.config.database,
        time: new Date().toISOString(),
        uptime: process.uptime(),
        environment: process.env.NODE_ENV || 'development'
      });
    });

    // –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API
    app.get('/api', (req, res) => {
      res.json({
        message: 'Metallurg API Server',
        version: '1.0.0',
        endpoints: [
          '/api/health - Server health check',
          '/api/departments - Department management',
          '/api/users - User management and authentication',
          '/api/assignments - Shift assignments management',
          '/api/tasks - Task management',
          '/api/techcards - Technical cards management',
          '/api/productionPlans - Production planning'
        ]
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤
    app.use('/api/*', (req, res) => {
      res.status(404).json({ 
        error: 'API Route not found',
        path: req.path,
        method: req.method
      });
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö 404
    app.use((req, res) => {
      res.status(404).json({ error: 'Route not found' });
    });

    // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    app.use((err, req, res, next) => {
      console.error('üí• Server error:', err.stack);
      
      // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Multer –æ—à–∏–±–æ–∫
      if (err.code === 'LIMIT_FILE_SIZE') {
        return res.status(413).json({ 
          error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
          message: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10MB' 
        });
      }

      if (err.code === 'LIMIT_UNEXPECTED_FILE') {
        return res.status(400).json({ 
          error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞',
          message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞' 
        });
      }

      // –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      const statusCode = err.statusCode || err.status || 500;
      res.status(statusCode).json({ 
        error: process.env.NODE_ENV === 'development' ? err.message : 'Internal Server Error'
      });
    });

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const server = app.listen(PORT, '0.0.0.0', () => {
      console.log(`üöÄ Server running on http://localhost:${PORT}`);
      console.log(`üìä Environment: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üíæ Database: ${db.sequelize.config.database}`);
      console.log(`üìÅ Uploads directory: ${uploadsDir}`);
    });

    // Graceful shutdown
    const gracefulShutdown = (signal) => {
      console.log(`\nüõë ${signal} received. Starting graceful shutdown...`);
      
      server.close(async () => {
        console.log('üì° HTTP server closed');
        
        try {
          await db.sequelize.close();
          console.log('üíæ Database connection closed');
        } catch (error) {
          console.error('‚ùå Error closing database:', error);
        }
        
        console.log('‚úÖ Graceful shutdown completed');
        process.exit(0);
      });

      // Force shutdown after 30 seconds
      setTimeout(() => {
        console.error('‚ùå Forced shutdown after timeout');
        process.exit(1);
      }, 30000);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è graceful shutdown
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

  } catch (err) {
    console.error('‚ùå Server startup failed:', err);
    console.error('Stack trace:', err.stack);
    process.exit(1);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
process.on('unhandledRejection', (reason, promise) => {
  console.error('‚ùå Unhandled Rejection at:', promise, 'reason:', reason);
});

process.on('uncaughtException', (error) => {
  console.error('‚ùå Uncaught Exception:', error);
  process.exit(1);
});

startServer();
