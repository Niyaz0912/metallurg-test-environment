require('dotenv').config();

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.JWT_SECRET) {
  console.error('‚ùå Fatal error: JWT_SECRET is not defined in .env file');
  process.exit(1);
}

const express = require('express');
const cors = require('cors');
const path = require('path');
const fs = require('fs');
const db = require('./models');

const app = express();
const PORT = process.env.PORT || 3001;

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
  console.log('üìÅ Created uploads directory');
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
app.use(cors({
  origin: [
    'http://localhost:5173',   // –í–µ–±-–≤–µ—Ä—Å–∏—è (Vite)
    'http://localhost:3000',   // –í–µ–±-–≤–µ—Ä—Å–∏—è (Create React App)
    'http://localhost:8081',   // Expo Metro Bundler
    'http://localhost:19000',  // Expo
    'http://localhost:19002',  // Expo
    'http://192.168.1.180:8081', // –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (Expo Metro Bundler)
    'http://192.168.1.180:19000', // –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (Expo)
    'http://192.168.1.180:19002', // –ú–æ–±–∏–ª—å–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (Expo)
    'http://10.0.2.2:8081',    // Android —ç–º—É–ª—è—Ç–æ—Ä (Metro Bundler)
    'http://10.0.2.2:19000',   // Android —ç–º—É–ª—è—Ç–æ—Ä (Expo)
    'http://10.0.2.2:19002',   // Android —ç–º—É–ª—è—Ç–æ—Ä (Expo)
    'http://localhost',        // –û–±—â–∏–π localhost
    'capacitor://localhost',   // Capacitor
    'ionic://localhost'        // Ionic
  ],
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  allowedHeaders: ['Content-Type', 'Authorization'],
  credentials: true
}));

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
// –û—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç –¥–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));

// ‚úÖ –î–û–ë–ê–í–õ–ï–ù: –†–æ—É—Ç –¥–ª—è API –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º (–¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞)
app.use('/api/files/uploads', express.static(path.join(__dirname, 'uploads')));

// ‚úÖ –î–û–ë–ê–í–õ–ï–ù: –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ä–æ—É—Ç –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ API
app.use('/api/files', express.static(path.join(__dirname, 'uploads')));

// ‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ó–ê–ü–†–û–°–û–í
app.use((req, res, next) => {
  const timestamp = new Date().toISOString();
  const userAgent = req.get('User-Agent') || 'Unknown';
  const ip = req.ip || req.connection.remoteAddress || 'Unknown IP';
  
  // –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  if (process.env.NODE_ENV !== 'test') {
    console.log(`[${timestamp}] ${req.method} ${req.url}`);
    
    // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (process.env.NODE_ENV === 'development') {
      console.log(`  üìç IP: ${ip}`);
      console.log(`  üîë Headers: ${JSON.stringify(req.headers, null, 2)}`);
      
      if (req.body && Object.keys(req.body).length > 0) {
        // –°–∫—Ä—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª–∏ –∏ —Ç–æ–∫–µ–Ω—ã –≤ –ª–æ–≥–∞—Ö
        const sanitizedBody = { ...req.body };
        if (sanitizedBody.password) sanitizedBody.password = '[HIDDEN]';
        if (sanitizedBody.token) sanitizedBody.token = '[HIDDEN]';
        if (sanitizedBody.refreshToken) sanitizedBody.refreshToken = '[HIDDEN]';
        
        console.log(`  üì¶ Body: ${JSON.stringify(sanitizedBody, null, 2)}`);
      }
      
      if (req.query && Object.keys(req.query).length > 0) {
        console.log(`  üîç Query: ${JSON.stringify(req.query, null, 2)}`);
      }
    }
  }
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
  const startTime = Date.now();
  
  res.on('finish', () => {
    if (process.env.NODE_ENV !== 'test') {
      const duration = Date.now() - startTime;
      const statusColor = res.statusCode >= 400 ? 'üî¥' : res.statusCode >= 300 ? 'üü°' : 'üü¢';
      console.log(`  ${statusColor} ${res.statusCode} - ${duration}ms`);
    }
  });
  
  next();
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–æ—É—Ç—ã
const departmentRoutes = require('./department/departmentRoutes');
const userRoutes = require('./users/userRoutes');
const assignmentRoutes = require('./assignments/assignmentRoutes');
const taskRoutes = require('./tasks/taskRoutes');
const techCardRoutes = require('./techCards/techCardRoutes');
const productionPlanRoutes = require('./productionPlans/productionPlanRoutes');

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã
app.use('/api/departments', departmentRoutes);
app.use('/api/users', userRoutes);
app.use('/api/assignments', assignmentRoutes);
app.use('/api/tasks', taskRoutes);
app.use('/api/techcards', techCardRoutes);
app.use('/api/productionPlans', productionPlanRoutes);

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    database: db.sequelize.config.database || 'sqlite-memory',
    time: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// ‚úÖ –î–û–ë–ê–í–õ–ï–ù: –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
app.get('/api/files/test', (req, res) => {
  const uploadsPath = path.join(__dirname, 'uploads');
  
  try {
    const files = fs.readdirSync(uploadsPath);
    res.json({
      message: 'Files API working',
      uploadsPath: uploadsPath,
      filesCount: files.length,
      files: files.slice(0, 10), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ñ–∞–π–ª–æ–≤
      availableRoutes: [
        '/uploads/* - Direct file access',
        '/api/files/uploads/* - API file access',
        '/api/files/* - Alternative API file access'
      ]
    });
  } catch (error) {
    res.status(500).json({
      error: 'Cannot read uploads directory',
      path: uploadsPath,
      message: error.message
    });
  }
});

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù: –ö–æ—Ä–Ω–µ–≤–æ–π –º–∞—Ä—à—Ä—É—Ç –ë–ï–ó –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
        <title>Metallurg App</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial; text-align: center; margin: 50px; background: #f5f5f5; }
            .container { max-width: 600px; margin: 0 auto; background: white; padding: 40px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            h1 { color: #333; margin-bottom: 10px; }
            p { color: #666; margin-bottom: 30px; }
            .section { margin: 30px 0; padding: 20px; background: #f8f9fa; border-radius: 5px; }
            a { display: inline-block; padding: 12px 25px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; margin: 5px; transition: background 0.3s; }
            a:hover { background: #0056b3; }
            .credentials { background: #e7f3ff; padding: 15px; border-radius: 5px; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üè≠ Metallurg App</h1>
            <p>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ–º</p>
            
            <div class="section">
                <h3>üì± –î–æ—Å—Ç—É–ø—ã –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é:</h3>
                <p>–§—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç –æ—Ç–¥–µ–ª—å–Ω–æ</p>
                <a href="/api" target="_blank">üìö API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a>
                <a href="/api/health" target="_blank">üíö –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</a>
                <a href="/api/files/test" target="_blank">üìÅ –¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤</a>
            </div>
            
            <div class="credentials">
                <h3>üîë –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Ö–æ–¥–∞:</h3>
                <p><strong>–õ–æ–≥–∏–Ω:</strong> admin</p>
                <p><strong>–ü–∞—Ä–æ–ª—å:</strong> 123456</p>
                <p><em>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞</em></p>
            </div>
            
            <div class="section">
                <h3>üîó API Endpoints:</h3>
                <p>–í—Å–µ API –º–∞—Ä—à—Ä—É—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É <code>/api/</code></p>
                <a href="/api/users" target="_blank">üë§ Users</a>
                <a href="/api/departments" target="_blank">üè¢ Departments</a>
                <a href="/api/tasks" target="_blank">‚úÖ Tasks</a>
                <a href="/api/techcards" target="_blank">üìÑ Tech Cards</a>
            </div>
        </div>
    </body>
    </html>
  `);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± API
app.get('/api', (req, res) => {
  res.json({
    message: 'Metallurg API Server',
    version: '1.0.0',
    endpoints: [
      '/api/health - Server health check',
      '/api/files/test - Files API test',
      '/api/departments - Department management',
      '/api/users - User management and authentication',
      '/api/assignments - Shift assignments management',
      '/api/tasks - Task management',
      '/api/techcards - Technical cards management',
      '/api/productionPlans - Production planning'
    ]
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 –¥–ª—è API –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.use('/api/*', (req, res) => {
  if (process.env.NODE_ENV !== 'test') {
    console.log(`üîç API Route not found: ${req.method} ${req.path}`);
  }
  res.status(404).json({
    error: 'API Route not found',
    path: req.path,
    method: req.method,
    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
    ...(req.path.includes('/files/') && {
      hint: 'Try these file routes:',
      alternatives: [
        `/uploads${req.path.replace('/api/files/uploads', '')}`,
        `/api/files${req.path.replace('/api/files/uploads', '')}`
      ]
    })
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö 404
app.use((req, res) => {
  if (process.env.NODE_ENV !== 'test') {
    console.log(`üîç Route not found: ${req.method} ${req.path}`);
  }
  res.status(404).json({ 
    error: 'Route not found',
    path: req.path,
    method: req.method
  });
});

// ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
app.use((err, req, res, next) => {
  const timestamp = new Date().toISOString();
  const errorId = Date.now().toString(36) + Math.random().toString(36).substr(2);
  
  // –û—Ç–∫–ª—é—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
  if (process.env.NODE_ENV !== 'test') {
    console.error('\n' + '='.repeat(80));
    console.error('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –°–ï–†–í–ï–†–ê');
    console.error('='.repeat(80));
    console.error(`‚è∞ –í—Ä–µ–º—è: ${timestamp}`);
    console.error(`üÜî ID –æ—à–∏–±–∫–∏: ${errorId}`);
    console.error(`üåê URL: ${req.method} ${req.url}`);
    console.error(`üìç IP: ${req.ip || req.connection.remoteAddress || 'Unknown'}`);
    console.error(`üë§ User-Agent: ${req.get('User-Agent') || 'Unknown'}`);
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    const sanitizedHeaders = { ...req.headers };
    if (sanitizedHeaders.authorization) sanitizedHeaders.authorization = '[HIDDEN]';
    if (sanitizedHeaders.cookie) sanitizedHeaders.cookie = '[HIDDEN]';
    console.error(`üìã Headers: ${JSON.stringify(sanitizedHeaders, null, 2)}`);
    
    // –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–±–µ–∑ –ø–∞—Ä–æ–ª–µ–π)
    if (req.body && Object.keys(req.body).length > 0) {
      const sanitizedBody = { ...req.body };
      if (sanitizedBody.password) sanitizedBody.password = '[HIDDEN]';
      if (sanitizedBody.token) sanitizedBody.token = '[HIDDEN]';
      console.error(`üì¶ Request Body: ${JSON.stringify(sanitizedBody, null, 2)}`);
    }
    
    // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${err.name || 'Unknown Error'}`);
    console.error(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${err.message || 'No message'}`);
    console.error(`üìä –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: ${err.statusCode || err.status || 500}`);
    
    // –°—Ç–µ–∫ –æ—à–∏–±–∫–∏
    if (err.stack) {
      console.error(`üìö Stack Trace:`);
      console.error(err.stack);
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    if (err.code) {
      console.error(`üî¢ Error Code: ${err.code}`);
    }
    
    if (err.sqlMessage) {
      console.error(`üóÑÔ∏è  SQL Error: ${err.sqlMessage}`);
    }
    
    if (err.sql) {
      console.error(`üìù SQL Query: ${err.sql}`);
    }
    
    console.error('='.repeat(80));
    console.error('\n');
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Multer –æ—à–∏–±–æ–∫
  if (err.code === 'LIMIT_FILE_SIZE') {
    return res.status(413).json({
      error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
      message: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10MB',
      errorId: errorId
    });
  }

  if (err.code === 'LIMIT_UNEXPECTED_FILE') {
    return res.status(400).json({
      error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞',
      message: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞',
      errorId: errorId
    });
  }

  // –û—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
  if (err.name === 'SequelizeValidationError') {
    return res.status(400).json({
      error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
      message: process.env.NODE_ENV === 'development' ? err.message : '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
      errorId: errorId
    });
  }

  if (err.name === 'SequelizeUniqueConstraintError') {
    return res.status(409).json({
      error: '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö',
      message: '–ó–∞–ø–∏—Å—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
      errorId: errorId
    });
  }

  // JWT –æ—à–∏–±–∫–∏
  if (err.name === 'JsonWebTokenError') {
    return res.status(401).json({
      error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω',
      errorId: errorId
    });
  }

  if (err.name === 'TokenExpiredError') {
    return res.status(401).json({
      error: '–¢–æ–∫–µ–Ω –∏—Å—Ç—ë–∫',
      message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ',
      errorId: errorId
    });
  }

  // –û–±—â–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  const statusCode = err.statusCode || err.status || 500;
  const isProduction = process.env.NODE_ENV === 'production';
  
  res.status(statusCode).json({
    error: isProduction ? 'Internal Server Error' : err.name || 'Server Error',
    message: isProduction ? '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' : err.message || 'Unknown error',
    errorId: errorId,
    ...(process.env.NODE_ENV === 'development' && {
      stack: err.stack,
      details: {
        url: req.url,
        method: req.method,
        timestamp: timestamp
      }
    })
  });
});

async function startServer() {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.sequelize.authenticate();
    console.log('‚úÖ Database connection established');

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    if (process.env.NODE_ENV === 'development') {
      try {
        // ‚úÖ –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º sync –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
        // await db.sequelize.sync({ alter: true });
        console.log('üîÑ Database sync disabled (preventing key duplication)');
        console.log('üîÑ Database models synced');
      } catch (syncError) {
        console.warn('‚ö†Ô∏è  Database sync warning:', syncError.message);
      }
    }

    console.log('üîó API routes registration completed');

    // –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const server = app.listen(PORT, '0.0.0.0', () => {
      console.log(`üöÄ Server running on http://localhost:${PORT}`);
      console.log(`üìä Environment: ${process.env.NODE_ENV || 'development'}`);
      console.log(`üíæ Database: ${db.sequelize.config.database || 'sqlite-memory'}`);
      console.log(`üìÅ Uploads directory: ${uploadsDir}`);
      
      // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–æ–≤—ã—Ö —Ä–æ—É—Ç–∞—Ö
      console.log(`üìÑ File routes:`);
      console.log(`   Direct: http://localhost:${PORT}/uploads/filename.pdf`);
      console.log(`   API: http://localhost:${PORT}/api/files/uploads/filename.pdf`);
      console.log(`   Alt: http://localhost:${PORT}/api/files/filename.pdf`);
      console.log(`   Test: http://localhost:${PORT}/api/files/test`);
    });

    // Graceful shutdown
    const gracefulShutdown = (signal) => {
      console.log(`\nüõë ${signal} received. Starting graceful shutdown...`);

      server.close(async () => {
        console.log('üì° HTTP server closed');

        try {
          await db.sequelize.close();
          console.log('üíæ Database connection closed');
        } catch (error) {
          console.error('‚ùå Error closing database:', error);
        }

        console.log('‚úÖ Graceful shutdown completed');
        process.exit(0);
      });

      // Force shutdown after 30 seconds
      setTimeout(() => {
        console.error('‚ùå Forced shutdown after timeout');
        process.exit(1);
      }, 30000);
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è graceful shutdown
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

  } catch (err) {
    console.error('‚ùå Server startup failed:', err);
    console.error('Stack trace:', err.stack);
    process.exit(1);
  }
}

// ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–ü–ï–†–ï–•–í–ê–ß–ï–ù–ù–´–• –û–®–ò–ë–û–ö
process.on('unhandledRejection', (reason, promise) => {
  if (process.env.NODE_ENV !== 'test') {
    console.error('\n' + '!'.repeat(60));
    console.error('üö® UNHANDLED PROMISE REJECTION');
    console.error('!'.repeat(60));
    console.error('‚è∞ Time:', new Date().toISOString());
    console.error('üéØ Promise:', promise);
    console.error('‚ùå Reason:', reason);
    console.error('üìö Stack:', reason?.stack || 'No stack trace');
    console.error('!'.repeat(60));
    console.error('\n');
  }
});

process.on('uncaughtException', (error) => {
  if (process.env.NODE_ENV !== 'test') {
    console.error('\n' + '!'.repeat(60));
    console.error('üö® UNCAUGHT EXCEPTION');
    console.error('!'.repeat(60));
    console.error('‚è∞ Time:', new Date().toISOString());
    console.error('‚ùå Error:', error.message);
    console.error('üìö Stack:', error.stack);
    console.error('!'.repeat(60));
    console.error('\n');
  }
  process.exit(1);
});

// ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê –°–†–ï–î–´
// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏
if (process.env.NODE_ENV !== 'test') {
  startServer();
}

// ‚úÖ –≠–ö–°–ü–û–†–¢–ò–†–£–ï–ú APP –î–õ–Ø –¢–ï–°–¢–û–í
module.exports = app;
