// ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ .env —Ñ–∞–π–ª–∞ –∏–∑ –ø–∞–ø–∫–∏ server
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env') });

// ‚úÖ –§–ò–ö–° –î–õ–Ø RAILWAY - –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ PORT
const PORT = (() => {
  let port = process.env.PORT;
  
  // –ï—Å–ª–∏ PORT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º 3001
  if (!port) return 3001;
  
  // –ï—Å–ª–∏ PORT —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
  if (typeof port === 'string') {
    port = parseInt(port, 10);
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞
  if (isNaN(port) || port < 0 || port > 65535) {
    console.warn('‚ö†Ô∏è Invalid PORT, using default 3001');
    return 3001;
  }
  
  return port;
})();

console.log('üîß Server starting with PORT:', PORT);

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!process.env.JWT_SECRET) {
  console.error('‚ùå Fatal error: JWT_SECRET is not defined');
  console.log('üîç Current JWT_SECRET:', process.env.JWT_SECRET);
  console.log('üìã NODE_ENV:', process.env.NODE_ENV);
  console.log('üìã PORT:', process.env.PORT);
  process.exit(1);
}

console.log(`üöÄ Starting server on port ${PORT}`);
console.log(`üìä Environment: ${process.env.NODE_ENV || 'development'}`);
console.log(`üîß PORT value: ${process.env.PORT} (processed as: ${PORT})`);

const express = require('express');
const cors = require('cors');
const fs = require('fs');
const db = require('./models');

const app = express();

// –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ uploads –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const uploadsDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadsDir)) {
  fs.mkdirSync(uploadsDir, { recursive: true });
  console.log('üìÅ Created uploads directory');
}

const isProduction = process.env.NODE_ENV === 'production';
const isRailway = process.env.RAILWAY_ENVIRONMENT_NAME || process.env.RAILWAY_PROJECT_NAME;

app.use(cors());

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
app.options('*catchall', cors());

// Middleware –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// ‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
app.use('/api/files/uploads', express.static(path.join(__dirname, 'uploads')));
app.use('/api/files', express.static(path.join(__dirname, 'uploads')));

// ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï
app.use((req, res, next) => {
  const isProduction = process.env.NODE_ENV === 'production';
  
  if (!isProduction || process.env.DEBUG_REQUESTS === 'true') {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] ${req.method} ${req.url}`);
    
    if (!isProduction && req.body && Object.keys(req.body).length > 0) {
      const sanitizedBody = { ...req.body };
      if (sanitizedBody.password) sanitizedBody.password = '[HIDDEN]';
      if (sanitizedBody.token) sanitizedBody.token = '[HIDDEN]';
      console.log(`  üì¶ Body:`, sanitizedBody);
    }
  }
  
  const startTime = Date.now();
  res.on('finish', () => {
    if (!isProduction || process.env.DEBUG_REQUESTS === 'true') {
      const duration = Date.now() - startTime;
      const statusColor = res.statusCode >= 400 ? 'üî¥' : res.statusCode >= 300 ? 'üü°' : 'üü¢';
      console.log(`  ${statusColor} ${res.statusCode} - ${duration}ms`);
    }
  });
  
  next();
});

// --- –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö --- 

// 1. –°–Ω–∞—á–∞–ª–∞ –í–°–ï API-—Ä–æ—É—Ç—ã
const departmentRoutes = require('./department/departmentRoutes');
const userRoutes = require('./users/userRoutes');
const assignmentRoutes = require('./assignments/assignmentRoutes');
const taskRoutes = require('./tasks/taskRoutes');
const techCardRoutes = require('./techCards/techCardRoutes');
const productionPlanRoutes = require('./productionPlans/productionPlanRoutes');

app.use('/api/departments', departmentRoutes);
app.use('/api/users', userRoutes);
app.use('/api/assignments', assignmentRoutes);
app.use('/api/tasks', taskRoutes);
app.use('/api/techcards', techCardRoutes);
app.use('/api/productionPlans', productionPlanRoutes);

app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    environment: process.env.NODE_ENV || 'development',
    railway: !!isRailway,
    database: db.sequelize.config.database || 'sqlite-memory',
    time: new Date().toISOString(),
    uptime: process.uptime()
  });
});

app.get('/api', (req, res) => {
  res.json({
    message: 'Metallurg API Server',
    version: '1.0.0',
    railway: !!isRailway,
    endpoints: [
      '/api/health - Server health check',
      '/health - Railway health check',
      '/api/departments - Department management',
      '/api/users - User management and authentication',
      '/api/assignments - Shift assignments management',
      '/api/tasks - Task management',
      '/api/techcards - Technical cards management',
      '/api/productionPlans - Production planning'
    ]
  });
});

// 2. –ü–æ—Ç–æ–º Middleware –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
const frontendBuildPath = path.join(__dirname, '..', 'frontend', 'dist');
if (isProduction || isRailway) {
  if (fs.existsSync(frontendBuildPath)) {
    console.log('üé® Frontend build found, serving React app from', frontendBuildPath);
    app.use(express.static(frontendBuildPath));
  } else {
    console.log('‚ö†Ô∏è Frontend build not found at', frontendBuildPath);
  }

  // 3. –ò —Ç–æ–ª—å–∫–æ –≤ —Å–∞–º–æ–º –∫–æ–Ω—Ü–µ ‚Äî Fallback –¥–ª—è SPA (–æ—Ç–¥–∞–µ—Ç index.html –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö GET –∑–∞–ø—Ä–æ—Å–æ–≤)
  app.get('*catchall', (req, res) => {
    const frontendIndexPath = path.join(frontendBuildPath, 'index.html');
    if (fs.existsSync(frontendIndexPath)) {
      res.sendFile(frontendIndexPath);
    } else {
      res.status(404).json({
        error: 'Frontend not built',
        message: 'index.html not found in build directory'
      });
    }
  });
}

// ‚úÖ –£–ü–†–û–©–ï–ù–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
app.use((err, req, res, next) => {
  const errorId = Date.now().toString(36);
  const isProduction = process.env.NODE_ENV === 'production';
  
  if (!isProduction) {
    console.error('üö® –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err.message);
    console.error('Stack:', err.stack);
  } else {
    console.error(`üö® –û—à–∏–±–∫–∞ [${errorId}]:`, err.message);
  }

  if (err.code === 'LIMIT_FILE_SIZE') {
    return res.status(413).json({
      error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π',
      message: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 10MB'
    });
  }

  if (err.name === 'SequelizeValidationError') {
    return res.status(400).json({
      error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö',
      message: isProduction ? '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' : err.message
    });
  }

  if (err.name === 'JsonWebTokenError' || err.name === 'TokenExpiredError') {
    return res.status(401).json({
      error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏',
      message: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ'
    });
  }

  const statusCode = err.statusCode || err.status || 500;
  
  res.status(statusCode).json({
    error: isProduction ? 'Internal Server Error' : err.name || 'Server Error',
    message: isProduction ? '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.' : err.message,
    ...(process.env.DEBUG === 'true' && { errorId })
  });
});

async function startServer() {
  try {
    // ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    await db.sequelize.authenticate();
    console.log('‚úÖ Database connection established');

    // ‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ –≤ development
    if (!isProduction) {
      console.log('üîÑ Development mode: Database sync disabled');
    }

    // ‚úÖ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    const server = app.listen(PORT, '0.0.0.0', () => {
      console.log(`üöÄ Server running on port ${PORT}`);
      console.log(`üìä Environment: ${process.env.NODE_ENV || 'development'}`);
      
      const isRailway = process.env.RAILWAY_ENVIRONMENT_NAME || process.env.RAILWAY_PROJECT_NAME;
      console.log(`üåê Railway: ${isRailway ? 'Yes' : 'No'}`);
      
      if (isRailway) {
        console.log(`üîó Railway URL: https://${process.env.RAILWAY_PROJECT_NAME || 'app'}.up.railway.app`);
      } else {
        console.log(`üè† Local URL: http://localhost:${PORT}`);
      }
    });

    // ‚úÖ Graceful shutdown
    const gracefulShutdown = (signal) => {
      console.log(`üõë ${signal} received. Shutting down gracefully...`);
      
      server.close(async () => {
        try {
          await db.sequelize.close();
          console.log('üíæ Database connection closed');
        } catch (error) {
          console.error('‚ùå Error closing database:', error.message);
        }
        process.exit(0);
      });

      setTimeout(() => {
        console.error('‚ùå Forced shutdown');
        process.exit(1);
      }, 10000);
    };

    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

  } catch (err) {
    console.error('‚ùå Server startup failed:', err.message);
    process.exit(1);
  }
}

// ‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ù–ï–û–ë–†–ê–ë–û–¢–ê–ù–ù–´–• –û–®–ò–ë–û–ö
process.on('unhandledRejection', (reason, promise) => {
  console.error('üö® Unhandled Promise Rejection:', reason?.message || reason);
});

process.on('uncaughtException', (error) => {
  console.error('üö® Uncaught Exception:', error.message);
  process.exit(1);
});

if (process.env.NODE_ENV !== 'test') {
  startServer();
}

module.exports = app;
