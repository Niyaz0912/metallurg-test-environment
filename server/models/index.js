'use strict';

require('dotenv').config();
const fs = require('fs');
const path = require('path');
const Sequelize = require('sequelize');
const basename = path.basename(__filename);

// –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
console.log('üîç DEBUG: Environment detection');
console.log('NODE_ENV from process.env:', process.env.NODE_ENV);
console.log('RAILWAY_ENVIRONMENT:', process.env.RAILWAY_ENVIRONMENT);
console.log('DATABASE_URL:', process.env.DATABASE_URL ? 'SET' : 'NOT SET');
console.log('MYSQLHOST:', process.env.MYSQLHOST ? 'SET' : 'NOT SET');
console.log('MYSQLDATABASE:', process.env.MYSQLDATABASE);

// –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú PRODUCTION –¥–ª—è Railway
const env = process.env.RAILWAY_ENVIRONMENT ? 'production' : (process.env.NODE_ENV || 'development');

console.log('üéØ Final ENV mode:', env);

const db = {};
let sequelize;

if (env === 'test') {
  // –î–ª—è —Ç–µ—Å—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º SQLite –≤ –ø–∞–º—è—Ç–∏
  sequelize = new Sequelize({
    dialect: 'sqlite',
    storage: ':memory:',
    logging: false,
  });
} else if (env === 'production') {
  console.log('üöÄ PRODUCTION MODE - Using Railway MySQL');

  if (process.env.MYSQLHOST && process.env.MYSQLDATABASE && process.env.MYSQLUSER && process.env.MYSQLPASSWORD) {
    console.log('‚úÖ Using separate MySQL component variables for connection');
    sequelize = new Sequelize({
      database: process.env.MYSQLDATABASE,
      username: process.env.MYSQLUSER,
      password: process.env.MYSQLPASSWORD,
      host: process.env.MYSQLHOST,
      port: process.env.MYSQLPORT || 3306,
      dialect: 'mysql',
      logging: false,
      pool: {
        max: 5,
        min: 0,
        acquire: 30000,
        idle: 10000
      },
      dialectOptions: {
        ssl: {
          require: true,
          rejectUnauthorized: false
        },
        connectTimeout: 60000
      }
    });
  } else {
    console.error('‚ùå Critical database connection variables are missing!');
    console.error('   Please ensure MYSQLHOST, MYSQLDATABASE, MYSQLUSER, and MYSQLPASSWORD are set in your environment.');
    // –í production –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑-–∑–∞ –ë–î, –Ω–æ –æ–Ω–æ –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ë–î
  }
} else {
  console.log('‚ö†Ô∏è DEVELOPMENT MODE');
  
  // –î–ª—è development –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  sequelize = new Sequelize({
    database: process.env.DB_NAME || 'metallurgdb',
    username: process.env.DB_USERNAME || 'root',
    password: process.env.DB_PASSWORD,
    host: process.env.DB_HOST || 'localhost',
    port: process.env.DB_PORT || 3306,
    dialect: 'mysql',
    logging: false,
  });
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π
fs.readdirSync(__dirname)
  .filter(file => {
    return (
      file.indexOf('.') !== 0 &&
      file !== basename &&
      file.slice(-3) === '.js' &&
      file.indexOf('.test.js') === -1
    );
  })
  .forEach(file => {
    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);
    db[model.name] = model;
  });

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞—Å—Å–æ—Ü–∏–∞—Ü–∏–π
Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î (–ù–ï –¥–ª—è —Ç–µ—Å—Ç–æ–≤)
if (env !== 'test') {
  (async () => {
    try {
      await sequelize.authenticate();
      console.log('‚úÖ Database connection established successfully');
      
      // –í–†–ï–ú–ï–ù–ù–û: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ production
      if (env === 'production') {
        console.log('üîÑ Creating tables automatically...');
        await sequelize.sync({ force: false, alter: true });
        console.log('‚úÖ All tables created successfully');
      }
      
      /*
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –≤ development
      if (env === 'development') {
        await sequelize.sync({ alter: true });
        console.log('üîÑ Database models synced');
      }
      */
    } catch (error) {
      console.error('‚ùå Unable to connect to the database:', error.message);
      console.error('üìö Full error:', error);
      
      // –í production –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–∑-–∑–∞ –ë–î
      if (env !== 'production') {
        process.exit(1);
      }
    }
  })();
}

// –≠–∫—Å–ø–æ—Ä—Ç
db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;


