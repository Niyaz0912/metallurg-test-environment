// server/assignments/excelParser.js
const ExcelJS = require('exceljs');
const db = require('../models');

class AssignmentExcelParser {
  constructor() {
    // –ú–∞–ø–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ Excel –Ω–∞ –ø–æ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    this.columnMapping = {
      '–ó–∞–∫–∞–∑—á–∏–∫': 'customerName',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞': 'detailName', 
      '–î–∞—Ç–∞ —Å–º–µ–Ω—ã': 'shiftDate',
      '–¢–∏–ø —Å–º–µ–Ω—ã': 'shiftType',
      '–õ–æ–≥–∏–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞': 'operatorUsername',
      '–ü–ª–∞–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ': 'plannedQuantity',
      '–ù–æ–º–µ—Ä —Å—Ç–∞–Ω–∫–∞': 'machineNumber'
    };
  }

  async parseExcelFile(filePath) {
    const results = {
      success: [],
      errors: [],
      skipped: []
    };

    try {
      const workbook = new ExcelJS.Workbook();
      await workbook.xlsx.readFile(filePath);
      const worksheet = workbook.getWorksheet(1);

      if (!worksheet) {
        throw new Error('Excel —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω');
      }

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
      const headerRow = worksheet.getRow(1);
      const headers = [];
      headerRow.eachCell((cell, colNumber) => {
        headers[colNumber] = cell.value?.toString().trim();
      });

      console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏ Excel:', headers);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
      for (let rowNum = 2; rowNum <= worksheet.rowCount; rowNum++) {
        const row = worksheet.getRow(rowNum);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (row.isEmpty) {
          results.skipped.push({
            row: rowNum,
            reason: '–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞'
          });
          continue;
        }

        try {
          const rowData = await this.parseRow(row, headers, rowNum);
          const assignment = await this.createAssignment(rowData);
          
          results.success.push({
            row: rowNum,
            assignment: assignment,
            data: rowData
          });

        } catch (error) {
          results.errors.push({
            row: rowNum,
            error: error.message,
            data: this.getRowData(row, headers)
          });
        }
      }

      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä—Å–∏–Ω–≥–∞:', {
        —É—Å–ø–µ—à–Ω–æ: results.success.length,
        –æ—à–∏–±–æ–∫: results.errors.length,
        –ø—Ä–æ–ø—É—â–µ–Ω–æ: results.skipped.length
      });

      return results;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel:', error);
      throw new Error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è Excel —Ñ–∞–π–ª–∞: ${error.message}`);
    }
  }

  async parseRow(row, headers, rowNum) {
    const rowData = {};

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–π —è—á–µ–π–∫–∏
    row.eachCell((cell, colNumber) => {
      const header = headers[colNumber];
      if (header && this.columnMapping[header]) {
        const fieldName = this.columnMapping[header];
        rowData[fieldName] = cell.value?.toString().trim();
      }
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = ['operatorUsername', 'shiftDate', 'shiftType', 'machineNumber'];
    for (const field of requiredFields) {
      if (!rowData[field]) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ${field}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    const operator = await db.User.findOne({
      where: { username: rowData.operatorUsername }
    });

    if (!operator) {
      throw new Error(`–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω: ${rowData.operatorUsername}`);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ —Å–º–µ–Ω—ã
    const shiftType = rowData.shiftType.toLowerCase();
    if (!['–¥–µ–Ω—å', '–Ω–æ—á—å', 'day', 'night'].includes(shiftType)) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–º–µ–Ω—ã: ${rowData.shiftType}`);
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
    return {
      operatorId: operator.id,
      shiftDate: this.parseDate(rowData.shiftDate),
      shiftType: shiftType === '–Ω–æ—á—å' || shiftType === 'night' ? 'night' : 'day',
      taskDescription: `–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ ${rowData.detailName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'} –¥–ª—è ${rowData.customerName || '–ù–µ —É–∫–∞–∑–∞–Ω'} –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${rowData.machineNumber}`,
      machineNumber: rowData.machineNumber,
      detailName: rowData.detailName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      customerName: rowData.customerName || '–ù–µ —É–∫–∞–∑–∞–Ω',
      plannedQuantity: parseInt(rowData.plannedQuantity) || 0,
      techCardId: 1,
      status: 'assigned'
    };
  }

  parseDate(dateString) {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
    const formats = [
      /(\d{4})-(\d{2})-(\d{2})/, // YYYY-MM-DD
      /(\d{2})\.(\d{2})\.(\d{4})/, // DD.MM.YYYY
      /(\d{2})\/(\d{2})\/(\d{4})/ // DD/MM/YYYY
    ];

    for (const format of formats) {
      const match = dateString.match(format);
      if (match) {
        if (format === formats[0]) {
          return new Date(match[1], match[2] - 1, match[3]);
        } else {
          return new Date(match[3], match[2] - 1, match[1]);
        }
      }
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
    const date = new Date(dateString);
    if (isNaN(date.getTime())) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: ${dateString}`);
    }
    
    return date;
  }

  async createAssignment(data) {
    return await db.Assignment.create(data);
  }

  getRowData(row, headers) {
    const data = {};
    row.eachCell((cell, colNumber) => {
      const header = headers[colNumber];
      if (header) {
        data[header] = cell.value?.toString().trim();
      }
    });
    return data;
  }
}

module.exports = AssignmentExcelParser;
