// server/assignments/excelParser.js
const ExcelJS = require('exceljs');
const db = require('../models');

class AssignmentExcelParser {
  constructor() {
    this.requiredColumns = [
      '–ó–∞–∫–∞–∑—á–∏–∫',
      '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞', 
      '–î–∞—Ç–∞ —Å–º–µ–Ω—ã',
      '–¢–∏–ø —Å–º–µ–Ω—ã',
      '–õ–æ–≥–∏–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞',
      '–ü–ª–∞–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ',
      '–ù–æ–º–µ—Ä —Å—Ç–∞–Ω–∫–∞'
    ];
  }

  async parseExcelFile(filePath, uploadedBy) {
    try {
      console.log('üîÑ –ü–∞—Ä—Å–∏–Ω–≥ Excel —Ñ–∞–π–ª–∞:', filePath);
      
      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä workbook
      const workbook = new ExcelJS.Workbook();
      
      // –ß–∏—Ç–∞–µ–º Excel —Ñ–∞–π–ª
      await workbook.xlsx.readFile(filePath);
      
      // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
      const worksheet = workbook.getWorksheet(1);
      
      if (!worksheet) {
        throw new Error('Excel —Ñ–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏—Å—Ç–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏');
      }

      console.log(`üìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∏—Å—Ç: "${worksheet.name}"`);

      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
      const headerRow = worksheet.getRow(1);
      const headers = [];
      
      headerRow.eachCell({ includeEmpty: false }, (cell, colNumber) => {
        headers[colNumber] = cell.text || cell.value;
      });

      console.log('üìù –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏:', headers);

      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
      this.validateHeaders(headers);

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –∫–æ–ª–æ–Ω–æ–∫
      const columnIndexes = this.getColumnIndexes(headers);

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏)
      const results = {
        success: [],
        errors: [],
        skipped: []
      };

      let processedRows = 0;
      
      // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞—á–∏–Ω–∞—è —Å 2-–π
      worksheet.eachRow({ includeEmpty: false }, async (row, rowNumber) => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if (rowNumber === 1) return;
        
        try {
          const rowData = this.extractRowData(row, columnIndexes);
          
          if (this.isEmptyRow(rowData)) {
            results.skipped.push({
              row: rowNumber,
              reason: '–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ'
            });
            return;
          }

          const assignment = await this.processRowData(rowData, rowNumber);
          
          if (assignment) {
            results.success.push({
              row: rowNumber,
              operator: assignment.operatorUsername,
              machine: assignment.machineNumber,
              assignmentId: assignment.id
            });
          } else {
            results.skipped.push({
              row: rowNumber,
              reason: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ'
            });
          }
          
          processedRows++;
          
        } catch (error) {
          results.errors.push({
            row: rowNumber,
            error: error.message,
            data: this.extractRowData(row, columnIndexes, true) // –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
          });
        }
      });

      console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç—Ä–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedRows}`);
      console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:', {
        —É—Å–ø–µ—à–Ω–æ: results.success.length,
        –æ—à–∏–±–∫–∏: results.errors.length,
        –ø—Ä–æ–ø—É—â–µ–Ω–æ: results.skipped.length
      });

      return results;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Excel:', error);
      throw error;
    }
  }

  validateHeaders(headers) {
    const availableHeaders = Object.values(headers).filter(h => h && h.trim());
    const missingColumns = this.requiredColumns.filter(col => 
      !availableHeaders.some(header => header.includes(col))
    );
    
    if (missingColumns.length > 0) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: ${missingColumns.join(', ')}`);
    }
  }

  getColumnIndexes(headers) {
    const indexes = {};
    
    Object.entries(headers).forEach(([colIndex, header]) => {
      if (!header) return;
      
      const headerText = header.toString().trim();
      
      this.requiredColumns.forEach(requiredCol => {
        if (headerText.includes(requiredCol)) {
          indexes[requiredCol] = parseInt(colIndex);
        }
      });
    });

    return indexes;
  }

  extractRowData(row, columnIndexes, safe = false) {
    const data = {};
    
    Object.entries(columnIndexes).forEach(([columnName, colIndex]) => {
      try {
        const cell = row.getCell(colIndex);
        
        // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —è—á–µ–π–∫–∏
        let value = cell.value;
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if (value === null || value === undefined) {
          data[columnName] = '';
        } else if (typeof value === 'object' && value.text) {
          // –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
          data[columnName] = value.text;
        } else if (value instanceof Date) {
          // –î–ª—è –¥–∞—Ç
          data[columnName] = value.toISOString().split('T')[0];
        } else {
          data[columnName] = value.toString().trim();
        }
        
      } catch (error) {
        if (!safe) {
          console.warn(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —è—á–µ–π–∫–∏ ${colIndex} –≤ —Å—Ç—Ä–æ–∫–µ ${row.number}:`, error.message);
        }
        data[columnName] = '';
      }
    });

    return data;
  }

  isEmptyRow(rowData) {
    const keyFields = ['–õ–æ–≥–∏–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞', '–ù–æ–º–µ—Ä —Å—Ç–∞–Ω–∫–∞'];
    return keyFields.every(field => !rowData[field] || rowData[field].trim() === '');
  }

  async processRowData(rowData, rowNumber) {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É
    const operatorUsername = rowData['–õ–æ–≥–∏–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞'];
    const operator = await db.User.findOne({
      where: { username: operatorUsername }
    });

    if (!operator) {
      throw new Error(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ª–æ–≥–∏–Ω–æ–º "${operatorUsername}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞—Ç—É —Å–º–µ–Ω—ã
    let shiftDate = rowData['–î–∞—Ç–∞ —Å–º–µ–Ω—ã'];
    if (!shiftDate || shiftDate === '') {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∏–∑–≤–µ—Å—Ç–Ω—É—é –¥–∞—Ç—É –∏–ª–∏ —Ç–µ–∫—É—â—É—é
      shiftDate = this.lastKnownDate || new Date().toISOString().split('T')[0];
    } else {
      this.lastKnownDate = shiftDate;
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ç–∏–ø —Å–º–µ–Ω—ã
    const shiftTypeText = rowData['–¢–∏–ø —Å–º–µ–Ω—ã'].toLowerCase();
    const shiftType = shiftTypeText.includes('–Ω–æ—á—å') || shiftTypeText.includes('night') ? 'night' : 'day';

    // –ü–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const customerName = rowData['–ó–∞–∫–∞–∑—á–∏–∫'] || '–ù–µ —É–∫–∞–∑–∞–Ω';
    const orderName = rowData['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞'] || '–ù–µ —É–∫–∞–∑–∞–Ω';
    const machineNumber = rowData['–ù–æ–º–µ—Ä —Å—Ç–∞–Ω–∫–∞'];
    const plannedQuantity = parseInt(rowData['–ü–ª–∞–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ']) || 0;

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    const taskDescription = `–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞ "${orderName}" –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞ "${customerName}" –Ω–∞ —Å—Ç–∞–Ω–∫–µ ${machineNumber}`;

    try {
      // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const assignment = await db.Assignment.create({
        operatorId: operator.id,
        shiftDate: new Date(shiftDate),
        shiftType: shiftType,
        taskDescription: taskDescription,
        machineNumber: machineNumber,
        detailName: orderName,
        customerName: customerName,
        plannedQuantity: plannedQuantity,
        techCardId: 1, // –í—Ä–µ–º–µ–Ω–Ω–æ, –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ç–µ—Ö–∫–∞—Ä—Ç–∞–º–∏
        status: 'assigned'
      });

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–∞
      assignment.operatorUsername = operatorUsername;

      return assignment;
      
    } catch (dbError) {
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: ${dbError.message}`);
    }
  }
}

module.exports = AssignmentExcelParser;
