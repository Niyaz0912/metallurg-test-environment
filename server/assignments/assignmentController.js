const db = require('../models');
const multer = require('multer');
const path = require('path');
const fs = require('fs');
const AssignmentExcelParser = require('./excelParser');
const { checkTableFields, getAvailableFields } = require('../utils/dbFieldsHelper');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è Excel —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = path.join(__dirname, '../uploads/assignments');
    if (!fs.existsSync(uploadDir)) {
      fs.mkdirSync(uploadDir, { recursive: true });
    }
    cb(null, uploadDir);
  },
  filename: (req, file, cb) => {
    const timestamp = Date.now();
    const originalName = file.originalname.replace(/[^a-zA-Z0-9.-]/g, '_');
    cb(null, `${timestamp}_${originalName}`);
  }
});

const upload = multer({
  storage: storage,
  fileFilter: (req, file, cb) => {
    const allowedExtensions = ['.xlsx', '.xls'];
    const fileExtension = path.extname(file.originalname).toLowerCase();
    cb(allowedExtensions.includes(fileExtension) ? null : new Error('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ Excel —Ñ–∞–π–ª—ã'), allowedExtensions.includes(fileExtension));
  },
  limits: { fileSize: 5 * 1024 * 1024 }
});

exports.uploadExcelMiddleware = upload.single('excelFile');

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const hasManagePermission = (userRole) => userRole === 'master' || userRole === 'admin';
const hasViewPermission = (userRole) => ['master', 'admin', 'employee', 'director'].includes(userRole);

// –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
exports.getFormData = async (req, res) => {
  try {
    if (!hasManagePermission(req.user.role)) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –∏–∑ TechCard
    const products = await db.TechCard.findAll({
      attributes: ['productName'],
      where: { status: 'active' },
      group: ['productName'],
      order: [['productName', 'ASC']]
    });

    // –î–ª—è –∫–∞–∂–¥–æ–π –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
    const formData = {};
    
    for (const product of products) {
      const customers = await db.TechCard.findAll({
        attributes: ['customer'],
        where: { 
          productName: product.productName,
          status: 'active' 
        },
        group: ['customer'],
        order: [['customer', 'ASC']]
      });
      
      formData[product.productName] = customers.map(c => c.customer);
    }

    res.json({
      products: products.map(p => p.productName),
      productCustomers: formData
    });

  } catch (error) {
    console.error('‚ùå Get form data error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã' });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π
exports.getAssignments = async (req, res) => {
  try {
    const user = req.user;

    if (!hasViewPermission(user.role)) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –ë–î
    const availableFields = await checkTableFields('assignments');
    console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è assignments:', availableFields);

    // –ü–æ–ª—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –ë–î  
    const desiredFields = [
      'id', 'operatorId', 'shiftDate', 'taskDescription', 'machineNumber',
      'detailName', 'customerName', 'plannedQuantity', 'actualQuantity',
      'techCardId', 'createdAt', 'updatedAt', 'productionPlanId', 
      'shiftType', 'status', 'startedAt', 'completedAt', 'notes'
    ];

    const fieldsToSelect = getAvailableFields(desiredFields, availableFields);
    console.log('‚úÖ –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—è:', fieldsToSelect);

    const whereCondition = hasManagePermission(user.role) ? {} : { operatorId: user.userId };
    const includeOperator = hasManagePermission(user.role) ? [
      { model: db.User, as: 'operator', attributes: ['id', 'firstName', 'lastName', 'username'] }
    ] : [];

    const assignments = await db.Assignment.findAll({
      attributes: fieldsToSelect,
      where: whereCondition,
      include: [
        ...includeOperator,
        { 
          model: db.TechCard, 
          as: 'techCard', 
          attributes: ['id', 'productName'] 
        }
      ],
      order: [['createdAt', 'DESC']]
    });

    if (!assignments || assignments.length === 0) {
      return res.json({
        message: '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π',
        assignments: []
      });
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: ${assignments.length}`);
    res.json(assignments);
  } catch (e) {
    console.error('‚ùå Get assignments error:', e);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
// –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
exports.createAssignment = async (req, res) => {
  console.log('üéØ createAssignment –í–•–û–î');
  console.log('üì¶ req.body:', JSON.stringify(req.body, null, 2));

  try {
    if (!hasManagePermission(req.user.role)) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const { 
      operatorId, 
      shiftDate, 
      shiftType, 
      taskDescription, 
      machineNumber, 
      detailName, 
      customerName, 
      plannedQuantity, 
      techCardId 
    } = req.body;

    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!operatorId || !shiftDate || !shiftType || !taskDescription || !machineNumber) {
      return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });
    }

    if (!['day', 'night'].includes(shiftType)) {
      return res.status(400).json({ message: '–¢–∏–ø —Å–º–µ–Ω—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "day" –∏–ª–∏ "night"' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
    const operator = await db.User.findByPk(operatorId);
    if (!operator) {
      return res.status(404).json({ message: '–û–ø–µ—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // ‚úÖ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–û–ò–°–ö –ü–†–û–ò–ó–í–û–î–°–¢–í–ï–ù–ù–û–ì–û –ü–õ–ê–ù–ê
    console.log('üîç –ò—â–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è:', { detailName, customerName });
    
    let productionPlan = null;
    
    // 1. –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –∑–∞–∫–∞–∑—á–∏–∫ + –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏
    if (detailName && customerName) {
      productionPlan = await db.ProductionPlan.findOne({
        where: {
          customerName: customerName,
          orderName: {
            [db.Sequelize.Op.like]: `%${detailName}%`
          },
          status: ['planned', 'in_progress']
        },
        order: [['createdAt', 'DESC']]
      });
      
      if (productionPlan) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–ª–∞–Ω (—Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ):', productionPlan.orderName, '–¥–ª—è', productionPlan.customerName);
      }
    }
    
    // 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω - –∏—â–µ–º –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑—á–∏–∫–∞
    if (!productionPlan && customerName) {
      productionPlan = await db.ProductionPlan.findOne({
        where: {
          customerName: customerName,
          status: ['planned', 'in_progress']
        },
        order: [['createdAt', 'DESC']]
      });
      
      if (productionPlan) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –ø–ª–∞–Ω (–ø–æ –∑–∞–∫–∞–∑—á–∏–∫—É):', productionPlan.orderName, '–¥–ª—è', productionPlan.customerName);
      }
    }
    
    // 3. –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –±–µ—Ä—ë–º –ª—é–±–æ–π –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞–Ω
    if (!productionPlan) {
      productionPlan = await db.ProductionPlan.findOne({
        where: {
          status: ['planned', 'in_progress']
        },
        order: [['createdAt', 'DESC']]
      });
      
      if (productionPlan) {
        console.log('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–∞—Å–Ω–æ–π –ø–ª–∞–Ω:', productionPlan.orderName, '–¥–ª—è', productionPlan.customerName);
      }
    }
    
    // 4. –ï—Å–ª–∏ —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ - –æ—à–∏–±–∫–∞
    if (!productionPlan) {
      return res.status(404).json({ 
        message: '–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–ª–∞–Ω. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–∫–∞–∑ —Å–Ω–∞—á–∞–ª–∞.',
        details: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞'
      });
    }

    console.log('üíæ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–ª–∞–Ω–æ–º:', {
      operatorId, 
      shiftDate, 
      shiftType, 
      taskDescription, 
      machineNumber, 
      detailName: detailName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      customerName: customerName || '–ù–µ —É–∫–∞–∑–∞–Ω',
      plannedQuantity: parseInt(plannedQuantity) || 0,
      techCardId: techCardId || 1,
      productionPlanId: productionPlan.id, // ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –ø–ª–∞–Ω
      foundPlanInfo: `${productionPlan.orderName} (${productionPlan.customerName})`
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–º –ø–ª–∞–Ω–æ–º
    const assignment = await db.Assignment.create({
      operatorId, 
      shiftDate: new Date(shiftDate), 
      shiftType, 
      taskDescription, 
      machineNumber, 
      detailName: detailName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
      customerName: customerName || '–ù–µ —É–∫–∞–∑–∞–Ω',
      plannedQuantity: parseInt(plannedQuantity) || 0,
      techCardId: techCardId || 1,
      productionPlanId: productionPlan.id, // ‚úÖ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï
      status: 'assigned'
    });

    const createdAssignment = await db.Assignment.findByPk(assignment.id, {
      include: [
        { model: db.User, as: 'operator', attributes: ['id', 'firstName', 'lastName', 'username'] },
        { model: db.TechCard, as: 'techCard', attributes: ['id', 'productName'] },
        { model: db.ProductionPlan, as: 'productionPlan', attributes: ['id', 'orderName', 'customerName'] }
      ]
    });

    console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ —Å ID:', assignment.id);
    
    res.status(201).json({
      message: '–ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ',
      assignment: createdAssignment,
      usedPlan: {
        id: productionPlan.id,
        name: productionPlan.orderName,
        customer: productionPlan.customerName
      }
    });

  } catch (e) {
    console.error('‚ùå Create assignment error:', e.message);
    console.error('‚ùå Stack trace:', e.stack);
    
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
      details: e.message 
    });
  }
};

// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
exports.updateAssignment = async (req, res) => {
  try {
    const { id } = req.params;
    const assignment = await db.Assignment.findByPk(id);

    if (!assignment) {
      return res.status(404).json({ message: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    const user = req.user;

    if (hasManagePermission(user.role)) {
      // –ú–∞—Å—Ç–µ—Ä/–∞–¥–º–∏–Ω –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å—ë
      const updateData = { ...req.body };
      if (updateData.shiftDate) updateData.shiftDate = new Date(updateData.shiftDate);
      if (updateData.plannedQuantity) updateData.plannedQuantity = parseInt(updateData.plannedQuantity);
      if (updateData.actualQuantity !== undefined) updateData.actualQuantity = parseInt(updateData.actualQuantity);
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º productionPlanId –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
      if (updateData.productionPlanId) updateData.productionPlanId = parseInt(updateData.productionPlanId);

      await assignment.update(updateData);
    } else if (user.role === 'employee' && assignment.operatorId === user.userId) {
      // –°–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–æ–∂–µ—Ç –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å—Ç–∞—Ç—É—Å
      const allowedFields = {};
      if (req.body.actualQuantity !== undefined) allowedFields.actualQuantity = parseInt(req.body.actualQuantity);
      if (req.body.status && ['assigned', 'completed'].includes(req.body.status)) allowedFields.status = req.body.status;

      if (Object.keys(allowedFields).length === 0) {
        return res.status(400).json({ message: '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
      }

      await assignment.update(allowedFields);
    } else {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const updatedAssignment = await db.Assignment.findByPk(id, {
      include: [
        { model: db.User, as: 'operator', attributes: ['id', 'firstName', 'lastName', 'username'] },
        { model: db.TechCard, as: 'techCard', attributes: ['id', 'productName', 'description'] }
      ]
    });

    res.json({ message: '–ó–∞–¥–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ', assignment: updatedAssignment });
  } catch (e) {
    console.error('Update assignment error:', e);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
exports.deleteAssignment = async (req, res) => {
  try {
    if (!hasManagePermission(req.user.role)) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const { id } = req.params;
    const deleted = await db.Assignment.destroy({ where: { id } });

    if (!deleted) {
      return res.status(404).json({ message: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    res.json({ message: '–ó–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' });
  } catch (e) {
    console.error('Delete assignment error:', e);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
exports.deleteAllActiveAssignments = async (req, res) => {
  try {
    if (!hasManagePermission(req.user.role)) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const deletedCount = await db.Assignment.destroy({
      where: { status: 'assigned' }
    });

    res.json({ 
      message: `–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ${deletedCount} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π`,
      deletedCount 
    });
  } catch (error) {
    console.error('Delete all active assignments error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π' });
  }
};

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø–æ ID
exports.getAssignmentById = async (req, res) => {
  try {
    const { id } = req.params;
    const assignment = await db.Assignment.findByPk(id, {
      include: [
        { model: db.User, as: 'operator', attributes: ['id', 'firstName', 'lastName', 'username'] },
        { model: db.TechCard, as: 'techCard', attributes: ['id', 'productName', 'description'] }
      ]
    });

    if (!assignment) {
      return res.status(404).json({ message: '–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }

    const user = req.user;
    if (hasManagePermission(user.role) || (assignment.operatorId === user.userId && user.role === 'employee')) {
      return res.json(assignment);
    }

    return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
  } catch (e) {
    console.error('Get assignment error:', e);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Excel
exports.uploadAssignmentsFromExcel = async (req, res) => {
  try {
    if (!hasManagePermission(req.user.role)) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    if (!req.file) {
      return res.status(400).json({ message: 'Excel —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
    }

    const parser = new AssignmentExcelParser();
    const results = await parser.parseExcelFile(req.file.path, req.user.userId);

    fs.unlinkSync(req.file.path); // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª

    res.json({
      message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ Excel —Ñ–∞–π–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞',
      summary: {
        total: results.success.length + results.errors.length + results.skipped.length,
        created: results.success.length,
        errors: results.errors.length,
        skipped: results.skipped.length
      },
      details: results
    });
  } catch (error) {
    console.error('Excel upload error:', error);
    if (req.file && fs.existsSync(req.file.path)) {
      fs.unlinkSync(req.file.path);
    }
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Excel —Ñ–∞–π–ª–∞' });
  }
};

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π
exports.getAssignmentStatistics = async (req, res) => {
  try {
    if (!hasManagePermission(req.user.role)) {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const stats = await db.Assignment.findAll({
      attributes: ['status', [db.sequelize.fn('COUNT', '*'), 'count']],
      group: ['status']
    });

    const totalAssignments = await db.Assignment.count();
    const completedToday = await db.Assignment.count({
      where: {
        status: 'completed',
        updatedAt: { [db.sequelize.Op.gte]: new Date(new Date().setHours(0, 0, 0, 0)) }
      }
    });

    res.json({
      total: totalAssignments,
      completedToday,
      byStatus: stats.reduce((acc, item) => {
        acc[item.dataValues.status] = parseInt(item.dataValues.count);
        return acc;
      }, {})
    });
  } catch (error) {
    console.error('Statistics error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
};

