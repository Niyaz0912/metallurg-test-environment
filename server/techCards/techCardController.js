const { TechCard, TechCardExecution, TechCardAccess, User } = require('../models');
const { checkTableFields, getAvailableFields } = require('../utils/dbFieldsHelper');

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
const hasManagePermission = (userRole) => userRole === 'master' || userRole === 'admin';
const hasViewPermission = (userRole) => ['master', 'admin', 'employee', 'director'].includes(userRole);

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–µ—Ö–∫–∞—Ä—Ç–µ
const logTechCardAccess = async (techCardId, userId, action = 'view') => {
  try {
    await TechCardAccess.create({
      techCardId,
      userId,
      action,
      accessedAt: new Date()
    });
  } catch (error) {
    console.error('Error logging tech card access:', error);
    // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –µ—Å–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
  }
};

// GET /api/techcards - —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)
const getAllTechCards = async (req, res) => {
  try {
    console.log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ—Ö–∫–∞—Ä—Ç...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è –≤ –ë–î
    const availableFields = await checkTableFields('tech_cards');
    console.log('üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è tech_cards:', availableFields);
    
    // –ü–æ–ª—è –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∏—Ç—å (–¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ë–î)
    const desiredFields = [
      'id', 'productName', 'description', 'drawingUrl', 
      'specifications', 'productionStages', 'createdAt', 'updatedAt',
      'partNumber', 'customer', 'order', 'quantity', 'pdfUrl', 
      'pdfFileSize', 'totalProducedQuantity', 'status', 'priority',
      'plannedEndDate', 'actualEndDate', 'notes', 'createdById'
    ];
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—è
    const fieldsToSelect = getAvailableFields(desiredFields, availableFields);
    console.log('‚úÖ –í—ã–±–∏—Ä–∞–µ–º –ø–æ–ª—è:', fieldsToSelect);
    
    const techCards = await TechCard.findAll({
      attributes: fieldsToSelect,
      order: [['createdAt', 'DESC']]
    });
    
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–µ—Ö–∫–∞—Ä—Ç: ${techCards.length}`);
    res.json(techCards);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–∫–∞—Ä—Ç:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Ö–∫–∞—Ä—Ç' });
  }
};

// GET /api/techcards/:id - –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
const getTechCardById = async (req, res) => {
  try {
    if (!hasViewPermission(req.user.role)) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const { id } = req.params;
    const techCard = await TechCard.findByPk(id, {
      include: [
        { 
          model: TechCardExecution, 
          as: 'executions',
          include: [
            { model: User, as: 'executor', attributes: ['id', 'firstName', 'lastName'] }
          ],
          order: [['executedAt', 'DESC']],
          required: false
        },
        { model: User, as: 'creator', attributes: ['id', 'firstName', 'lastName'], required: false },
        {
          model: TechCardAccess,
          as: 'accesses',
          include: [
            { model: User, as: 'user', attributes: ['id', 'firstName', 'lastName'] }
          ],
          order: [['accessedAt', 'DESC']],
          limit: 50,
          required: false
        }
      ]
    });

    if (!techCard) {
      return res.status(404).json({ error: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // üéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–†–û–°–ú–û–¢–†–ê
    await logTechCardAccess(id, req.user.userId, 'view');

    res.json(techCard);
  } catch (error) {
    console.error('Get tech card by id error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã' });
  }
};

// POST /api/techcards - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç—ã (–û–ë–ù–û–í–õ–ï–ù–û)
const createTechCard = async (req, res) => {
  try {
    if (!hasManagePermission(req.user.role)) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const {
      customer,
      order,
      productName,
      partNumber,
      quantity,
      pdfUrl,
      description,
      // üÜï –ù–æ–≤—ã–µ –ø–æ–ª—è
      priority = 'medium',
      plannedEndDate,
      notes
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!customer || !order || !productName || !quantity) {
      return res.status(400).json({ 
        error: '–ó–∞–∫–∞–∑—á–∏–∫, –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' 
      });
    }

    if (quantity < 1) {
      return res.status(400).json({ error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' });
    }

    const techCard = await TechCard.create({
      customer,
      order,
      productName,
      partNumber,
      quantity: parseInt(quantity),
      pdfUrl,
      description,
      // üÜï –ù–æ–≤—ã–µ –ø–æ–ª—è
      priority,
      plannedEndDate: plannedEndDate || null,
      notes,
      createdById: req.user.userId,
      status: 'draft'
    });

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–∞—Ä—Ç—É —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const createdTechCard = await TechCard.findByPk(techCard.id, {
      include: [
        { model: User, as: 'creator', attributes: ['id', 'firstName', 'lastName'], required: false }
      ]
    });

    res.status(201).json(createdTechCard);
  } catch (error) {
    console.error('Create tech card error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã' });
  }
};

// PUT /api/techcards/:id - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã (–û–ë–ù–û–í–õ–ï–ù–û)
const updateTechCard = async (req, res) => {
  try {
    if (!hasManagePermission(req.user.role)) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const { id } = req.params;
    const techCard = await TechCard.findByPk(id);

    if (!techCard) {
      return res.status(404).json({ error: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    const {
      customer,
      order,
      productName,
      partNumber,
      quantity,
      pdfUrl,
      description,
      status,
      // üÜï –ù–æ–≤—ã–µ –ø–æ–ª—è
      priority,
      plannedEndDate,
      actualEndDate,
      notes
    } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
    const updateData = {};
    if (customer !== undefined) updateData.customer = customer;
    if (order !== undefined) updateData.order = order;
    if (productName !== undefined) updateData.productName = productName;
    if (partNumber !== undefined) updateData.partNumber = partNumber;
    if (quantity !== undefined) {
      if (quantity < 1) {
        return res.status(400).json({ error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' });
      }
      updateData.quantity = parseInt(quantity);
    }
    if (pdfUrl !== undefined) updateData.pdfUrl = pdfUrl;
    if (description !== undefined) updateData.description = description;
    if (status !== undefined) updateData.status = status;

    // üÜï –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
    if (priority !== undefined) updateData.priority = priority;
    if (plannedEndDate !== undefined) updateData.plannedEndDate = plannedEndDate || null;
    if (actualEndDate !== undefined) updateData.actualEndDate = actualEndDate || null;
    if (notes !== undefined) updateData.notes = notes;

    await techCard.update(updateData);

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞—Ä—Ç—É
    const updatedTechCard = await TechCard.findByPk(id, {
      include: [
        { model: User, as: 'creator', attributes: ['id', 'firstName', 'lastName'], required: false }
      ]
    });

    res.json(updatedTechCard);
  } catch (error) {
    console.error('Update tech card error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã' });
  }
};

// DELETE /api/techcards/:id - —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã
const deleteTechCard = async (req, res) => {
  try {
    if (!hasManagePermission(req.user.role)) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const { id } = req.params;
    const techCard = await TechCard.findByPk(id);

    if (!techCard) {
      return res.status(404).json({ error: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∫–∞—Ä—Ç–∞ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö
    const { Assignment } = require('../models');
    const activeAssignments = await Assignment.count({
      where: { 
        techCardId: id,
        status: ['assigned', 'in_progress']
      }
    });

    if (activeAssignments > 0) {
      return res.status(400).json({ 
        error: `–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Ç–µ—Ö–∫–∞—Ä—Ç—É. –û–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ ${activeAssignments} –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö` 
      });
    }

    await techCard.destroy();
    res.json({ message: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' });
  } catch (error) {
    console.error('Delete tech card error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç—ã' });
  }
};

// POST /api/techcards/:id/executions - –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–£–ü–†–û–©–ï–ù–ù–û–ï)
const addExecution = async (req, res) => {
  try {
    if (!hasViewPermission(req.user.role)) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const { id } = req.params;
    const {
      quantityProduced,
      setupNumber
    } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–∫–∞—Ä—Ç—ã
    const techCard = await TechCard.findByPk(id);
    if (!techCard) {
      return res.status(404).json({ error: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!quantityProduced || quantityProduced < 1) {
      return res.status(400).json({ 
        error: '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0' 
      });
    }

    const execution = await TechCardExecution.create({
      techCardId: id,
      executedById: req.user.userId,
      quantityProduced: parseInt(quantityProduced),
      setupNumber: setupNumber ? parseInt(setupNumber) : 1,
      executedAt: new Date()
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ç–µ—Ö–∫–∞—Ä—Ç–µ
    await techCard.increment('totalProducedQuantity', { by: parseInt(quantityProduced) });

    // üéØ –õ–û–ì–ò–†–£–ï–ú –ö–ê–ö –†–ê–ë–û–¢–£ (–Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ—Å–º–æ—Ç—Ä)
    await logTechCardAccess(id, req.user.userId, 'work');

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const createdExecution = await TechCardExecution.findByPk(execution.id, {
      include: [
        { model: User, as: 'executor', attributes: ['id', 'firstName', 'lastName'] }
      ]
    });

    res.status(201).json(createdExecution);
  } catch (error) {
    console.error('Add execution error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è' });
  }
};

// üÜï –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ URL PDF —Ñ–∞–π–ª–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º (–û–ë–ù–û–í–õ–ï–ù–û)
const updatePdfUrl = async (id, pdfUrl, pdfFileSize = null) => {
  try {
    const techCard = await TechCard.findByPk(id);
    
    if (!techCard) {
      throw new Error('–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const updateData = { pdfUrl };
    if (pdfFileSize !== null) {
      updateData.pdfFileSize = pdfFileSize;
    }

    await techCard.update(updateData);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ç–µ—Ö–∫–∞—Ä—Ç—É —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const updatedTechCard = await TechCard.findByPk(id, {
      include: [
        { model: User, as: 'creator', attributes: ['id', 'firstName', 'lastName'], required: false }
      ]
    });

    return updatedTechCard;
  } catch (error) {
    console.error('Error updating PDF URL:', error);
    throw error;
  }
};

// GET /api/techcards/:id/accesses - –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–æ—Å—Ç—É–ø–æ–≤ –∫ —Ç–µ—Ö–∫–∞—Ä—Ç–µ
const getTechCardAccesses = async (req, res) => {
  try {
    if (!hasManagePermission(req.user.role)) {
      return res.status(403).json({ error: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    const { id } = req.params;
    const accesses = await TechCardAccess.findAll({
      where: { techCardId: id },
      include: [
        { model: User, as: 'user', attributes: ['id', 'firstName', 'lastName'] }
      ],
      order: [['accessedAt', 'DESC']],
      limit: 100
    });

    res.json(accesses);
  } catch (error) {
    console.error('Get tech card accesses error:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ—Å—Ç—É–ø–æ–≤' });
  }
};

module.exports = {
  getAllTechCards,
  getTechCardById,
  createTechCard,
  updateTechCard,
  deleteTechCard,
  addExecution,
  updatePdfUrl,
  getTechCardAccesses,
  logTechCardAccess
};

