const db = require('../models');
// const bcrypt = require('bcrypt'); // –û–¢–ö–õ–Æ–ß–ï–ù–û –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
const jwt = require('jsonwebtoken');
const { validationResult } = require('express-validator');
const nodemailer = require('nodemailer');
require('dotenv').config();

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
exports.getAllUsers = async (req, res) => {
  try {
    const users = await db.User.findAll({
      attributes: { exclude: ['passwordHash'] },
      include: {
        model: db.Department,
        as: 'department',
        attributes: ['id', 'name']
      }
    });
    res.json(users);
  } catch (e) {
    console.error('Get all users error:', e);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

exports.register = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { username, password, firstName, lastName, role, phone, masterId, departmentId } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª–∞
    const department = await db.Department.findByPk(departmentId);
    if (!department) {
      return res.status(400).json({ message: '–£–∫–∞–∑–∞–Ω–Ω—ã–π –æ—Ç–¥–µ–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const existingUser = await db.User.findOne({ where: { username } });
    if (existingUser) {
      return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    // ‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–û: –•—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å—Ä–µ–¥—ã
    // const passwordHash = await bcrypt.hash(password, 10);

    // ‚úÖ –¢–ï–°–¢–û–í–ê–Ø –°–†–ï–î–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –∫–∞–∫ –µ—Å—Ç—å
    const passwordHash = password; // –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–æ–≤

    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await db.User.create({
      username,
      passwordHash,
      firstName,
      lastName,
      role,
      phone,
      masterId,
      departmentId
    });

    // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö—ç—à –ø–∞—Ä–æ–ª—è –≤ –æ—Ç–≤–µ—Ç–µ
    const userResponse = user.get({ plain: true });
    delete userResponse.passwordHash;

    res.status(201).json({
      message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
      user: userResponse
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
    res.status(500).json({
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      error: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

// –õ–æ–≥–∏–Ω - –£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –î–õ–Ø –¢–ï–°–¢–û–í–û–ô –°–†–ï–î–´
exports.login = async (req, res) => {
  try {
    const { username, password } = req.body;

    // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!username || !password) {
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    console.log('üîç –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', username);

    const user = await db.User.unscoped().findOne({
      where: { username },
      include: [{ model: db.Department, as: 'department' }],
      attributes: { include: ['passwordHash'] }
    });

    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', user ? user.username : '–ù–ï–¢');

    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    const { passwordHash } = user;
    console.log('üîë –ü–∞—Ä–æ–ª—å –ø–æ–ª—É—á–µ–Ω:', passwordHash ? '–î–ê' : '–ù–ï–¢');

    // ‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è —á–µ—Ä–µ–∑ bcrypt –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    /*
    let passwordValid = false;

    if (passwordHash && passwordHash.startsWith('$2b
)) {
      try {
        passwordValid = await bcrypt.compare(password, passwordHash);
        console.log('üîí –†–µ–∑—É–ª—å—Ç–∞—Ç bcrypt –¥–ª—è', username, ':', passwordValid);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ bcrypt:', error);
        passwordValid = false;
      }
    } else {
      console.log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ö–µ—à–∞ –ø–∞—Ä–æ–ª—è');
      passwordValid = false;
    }
    */

    // ----------------------------------------------------------------
    // –í–ê–ñ–ù–û: –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –¥–≤—É—Ö —Ä–µ–∂–∏–º–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
    // ----------------------------------------------------------------

    // ‚úÖ –†–ï–ñ–ò–ú 1: –î–õ–Ø –¢–ï–°–¢–û–í–û–ô –°–†–ï–î–´ (–ø—Ä–æ—Å—Ç–∞—è —Å–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞)
    // –°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–µ–Ω —ç—Ç–æ—Ç —Ä–µ–∂–∏–º. –ü–∞—Ä–æ–ª–∏ –≤ –±–∞–∑–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≤–∏–¥–µ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    const passwordValid = password === passwordHash;
    console.log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è', username, ':', passwordValid);

    /*
    // üîí –†–ï–ñ–ò–ú 2: –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ö–µ—à–∞ bcrypt)
    // –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å, –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –†–ï–ñ–ò–ú 1 –∏ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –±–ª–æ–∫.
    // –¢–∞–∫–∂–µ –Ω—É–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å `const bcrypt = require('bcrypt');` –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞.
    const passwordValid = await bcrypt.compare(password, passwordHash);
    console.log('üîí –†–µ–∑—É–ª—å—Ç–∞—Ç bcrypt –¥–ª—è', username, ':', passwordValid);
    */

    if (!passwordValid) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è:', username);
      return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    }

    console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ –¥–ª—è:', username);

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
    const token = jwt.sign(
      { 
        userId: user.id, 
        role: user.role, 
        username: user.username 
      },
      process.env.JWT_SECRET,
      { expiresIn: '24h' }
    );

    console.log('üé´ JWT —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID:', user.id);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ passwordHash
    res.json({
      token,
      user: {
        id: user.id,
        username: user.username,
        firstName: user.firstName,
        lastName: user.lastName,
        role: user.role,
        department: user.department
      }
    });

  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ –≤ login:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ú–ï–¢–û–î: –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
exports.getMe = async (req, res) => {
  try {
    const userId = req.user.userId;

    const user = await db.User.findByPk(userId, {
      include: [
        {
          model: db.Department,
          as: 'department',
          attributes: ['id', 'name'],
          required: false
        }
      ],
      attributes: ['id', 'firstName', 'lastName', 'role', 'position', 'departmentId']
    });

    if (!user) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('Department data:', {
      dbDepartmentId: user.departmentId,
      includedDepartment: user.department
    });

    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê —Å departmentId
    const userData = {
      id: user.id,
      firstName: user.firstName,
      lastName: user.lastName,
      role: user.role,
      position: user.position,
      departmentId: user.departmentId,
      department: user.department 
        ? { id: user.department.id, name: user.department.name }
        : null
    };

    console.log('üë§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);

    res.json({ user: userData });
  } catch (error) {
    console.error('GetMe error:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è)
exports.getProfileWithAssignments = async (req, res) => {
  try {
    const userId = req.user.userId;
    const user = await db.User.findByPk(userId, { attributes: { exclude: ['passwordHash'] } });
    if (!user) return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    let assignments;
    if (user.role === 'master') {
      assignments = await db.Assignment.findAll({
        include: ['operator', 'techCard']
      });
    } else {
      assignments = await db.Assignment.findAll({
        where: { operatorId: userId },
        include: ['techCard']
      });
    }

    res.json({ user, assignments });

  } catch (e) {
    console.error(e);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç—É–ø (–æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞)
exports.requestAccess = async (req, res) => {
  try {
    const { fullName, employeeId, contact } = req.body;
    if (!fullName || !employeeId || !contact) {
      return res.status(400).json({ message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
    }

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nodemailer (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ SMTP –¥–∞–Ω–Ω—ã–µ!)
    const transporter = nodemailer.createTransporter({
      host: process.env.SMTP_HOST,
      port: parseInt(process.env.SMTP_PORT),
      auth: {
        user: process.env.SMTP_USER,
        pass: process.env.SMTP_PASS,
      },
    });

    const mailOptions = {
      from: process.env.SMTP_USER,
      to: process.env.IT_SUPPORT_EMAIL,
      subject: `–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –æ—Ç ${fullName}`,
      text: `–î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞:\n\n–§–ò–û: ${fullName}\n–¢–∞–±–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä: ${employeeId}\n–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${contact}\n\n–î–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toLocaleString()}`,
    };

    await transporter.sendMail(mailOptions);

    res.json({ message: '–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.' });
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞' });
  }
};

// –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
exports.deleteUser = async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await db.User.destroy({ where: { id } });
    if (!deleted) return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω' });
  } catch (e) {
    console.error(e);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
exports.updateUser = async (req, res) => {
  try {
    const { id } = req.params;
    const { role } = req.body;

    // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ä–æ–ª–∏
    if (req.user.currentRole !== 'admin') {
      return res.status(403).json({ message: '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω' });
    }

    await db.User.update({ role }, { where: { id } });
    res.json({ message: '–†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  } catch (e) {
    console.error('Update user error:', e);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
exports.updateUserRole = async (req, res) => {
  try {
    const { id } = req.params;
    const { role } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–æ–ª–∏
    const validRoles = ['employee', 'master', 'director', 'admin'];
    if (!validRoles.includes(role)) {
      return res.status(400).json({ message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è —Ä–æ–ª—å' });
    }

    const [updated] = await db.User.update(
      { role },
      { where: { id } }
    );

    if (!updated) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.json({ message: '–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  } catch (e) {
    console.error('Update role error:', e);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};
