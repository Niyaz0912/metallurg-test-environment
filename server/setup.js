const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m'
};

const log = (message, color = 'reset') => {
  console.log(`${colors[color]}${message}${colors.reset}`);
};

const runCommand = (command, description) => {
  log(`üîÑ ${description}...`, 'blue');
  try {
    execSync(command, { stdio: 'inherit', cwd: process.cwd() });
    log(`‚úÖ ${description} - —É—Å–ø–µ—à–Ω–æ`, 'green');
    return true;
  } catch (error) {
    log(`‚ùå ${description} - –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    return false;
  }
};

const checkEnvironment = () => {
  const isRailway = process.env.RAILWAY_ENVIRONMENT || process.env.RAILWAY_PROJECT_ID;
  const isProduction = process.env.NODE_ENV === 'production';
  
  log(`üåç –û–∫—Ä—É–∂–µ–Ω–∏–µ: ${isRailway ? 'Railway' : '–õ–æ–∫–∞–ª—å–Ω–æ–µ'}`, 'yellow');
  log(`üîß –†–µ–∂–∏–º: ${isProduction ? 'Production' : 'Development'}`, 'yellow');
  
  return { isRailway, isProduction };
};

const installDependencies = () => {
  log('üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...', 'blue');
  
  // –ö–æ—Ä–Ω–µ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  runCommand('npm install', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ—Ä–Ω–µ–≤—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π');
  
  // Backend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  if (fs.existsSync('./server')) {
    runCommand('cd server && npm install', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π backend');
  }
  
  // Frontend –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
  if (fs.existsSync('./frontend')) {
    runCommand('cd frontend && npm install', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π frontend');
  }
};

const setupDatabase = async () => {
  const { isRailway, isProduction } = checkEnvironment();
  
  log('üóÑÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', 'blue');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –ë–î
  const dbVars = {
    host: process.env.MYSQLHOST || process.env.DB_HOST,
    user: process.env.MYSQLUSER || process.env.DB_USERNAME,
    password: process.env.MYSQLPASSWORD || process.env.DB_PASSWORD,
    database: process.env.MYSQLDATABASE || process.env.DB_NAME,
    port: process.env.MYSQLPORT || process.env.DB_PORT
  };
  
  if (!dbVars.host || !dbVars.user || !dbVars.password) {
    log('‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏...', 'yellow');
    return false;
  }
  
  log(`üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ë–î: ${dbVars.host}:${dbVars.port}`, 'blue');
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sequelize-cli –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
  if (!fs.existsSync('./server/node_modules/.bin/sequelize')) {
    runCommand('cd server && npm install --save-dev sequelize-cli', '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Sequelize CLI');
  }
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
  const migrateSuccess = runCommand('cd server && npx sequelize-cli db:migrate', '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π');
  
  if (migrateSuccess) {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (—Ç–æ–ª—å–∫–æ –≤ development)
    if (!isProduction) {
      runCommand('cd server && npx sequelize-cli db:seed:all', '–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
    }
  }
  
  return migrateSuccess;
};

const buildFrontend = () => {
  const { isProduction } = checkEnvironment();
  
  if (isProduction && fs.existsSync('./frontend')) {
    log('üèóÔ∏è –°–±–æ—Ä–∫–∞ frontend –¥–ª—è production...', 'blue');
    return runCommand('cd frontend && npm run build', '–°–±–æ—Ä–∫–∞ frontend');
  }
  
  return true;
};

const startServers = () => {
  const { isRailway, isProduction } = checkEnvironment();
  
  if (isRailway && isProduction) {
    log('üöÄ –ó–∞–ø—É—Å–∫ production —Å–µ—Ä–≤–µ—Ä–∞...', 'green');
    runCommand('node server/server.js', '–ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞');
  } else {
    log('üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ npm run dev', 'yellow');
  }
};

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = async () => {
  log('üéØ Metallurg Test Environment - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞', 'green');
  log('=' * 60, 'blue');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    checkEnvironment();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    installDependencies();
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await setupDatabase();
    
    // –°–æ–±–∏—Ä–∞–µ–º frontend –¥–ª—è production
    buildFrontend();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä—ã (—Ç–æ–ª—å–∫–æ –Ω–∞ Railway)
    if (process.env.RAILWAY_ENVIRONMENT) {
      startServers();
    }
    
    log('üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', 'green');
    
  } catch (error) {
    log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'red');
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}

module.exports = { main, setupDatabase, installDependencies };
