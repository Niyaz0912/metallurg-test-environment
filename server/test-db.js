require('dotenv').config();

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
process.env.NODE_ENV = 'test';
process.env.DB_DIALECT = 'sqlite';
process.env.DB_STORAGE = ':memory:';
process.env.JWT_SECRET = 'test_jwt_secret';

const { Sequelize, DataTypes } = require('sequelize');

// –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –≤ –ø–∞–º—è—Ç–∏
const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: ':memory:',
  logging: console.log // –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å—ã
});

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å User –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
const UserModel = require('./models/userModel');  // ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ!
const User = UserModel(sequelize, DataTypes);

// –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –º–æ–¥–µ–ª—å Department (–Ω—É–∂–Ω–∞ –¥–ª—è —Å–≤—è–∑–µ–π)
const Department = sequelize.define('Department', {
  name: {
    type: DataTypes.STRING,
    allowNull: false
  }
}, {
  tableName: 'departments'
});

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–≤—è–∑–∏
User.belongsTo(Department, {
  foreignKey: 'departmentId',
  as: 'department'
});

async function testDatabase() {
  try {
    console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await sequelize.authenticate();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!');

    console.log('üìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—ã...');
    await sequelize.sync({ force: true });
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!');

    // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è User)
    console.log('üè¢ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç...');
    const department = await Department.create({
      name: 'IT Department'
    });
    console.log('‚úÖ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω:', department.toJSON());

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const userData = {
      username: 'testuser',
      firstName: '–¢–µ—Å—Ç',
      lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      role: 'employee',
      phone: '+79991234567',
      passwordHash: 'hashed_password_123',
      departmentId: department.id,
      position: '–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫'
    };

    const user = await User.create(userData);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω:');
    console.log(JSON.stringify(user.toJSON(), null, 2));

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const foundUser = await User.findByPk(user.id);
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:', foundUser.toJSON());

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üìù –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    await foundUser.update({ phone: '+79997654321' });
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', foundUser.toJSON());

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üóëÔ∏è –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    await foundUser.destroy();
    console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω
    const deletedUser = await User.findByPk(user.id);
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ:', deletedUser); // –î–æ–ª–∂–Ω–æ –±—ã—Ç—å null

    console.log('üéâ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    console.error('üìç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', error);
  } finally {
    await sequelize.close();
    console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
testDatabase();
