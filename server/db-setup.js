const { exec } = require('child_process');
const { promisify } = require('util');
const execAsync = promisify(exec);

class DatabaseSetup {
  constructor() {
    this.maxRetries = 3;
    this.retryDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥
  }

  async sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async runCommand(command, description, retries = this.maxRetries) {
    for (let i = 0; i < retries; i++) {
      try {
        console.log(`üîÑ ${description} (attempt ${i + 1}/${retries})`);
        
        const { stdout, stderr } = await execAsync(command, { 
          cwd: __dirname,
          timeout: 120000, // 2 –º–∏–Ω—É—Ç—ã —Ç–∞–π–º–∞—É—Ç
          env: { 
            ...process.env,
            NODE_ENV: process.env.NODE_ENV || 'production'
          }
        });
        
        if (stdout) {
          console.log(stdout);
        }
        
        if (stderr && !stderr.includes('warn')) {
          console.log('‚ö†Ô∏è Warnings:', stderr);
        }
        
        console.log(`‚úÖ ${description} completed successfully`);
        return { success: true, output: stdout };
        
      } catch (error) {
        console.error(`‚ùå ${description} failed (attempt ${i + 1}):`, error.message);
        
        if (i < retries - 1) {
          console.log(`‚è≥ Retrying in ${this.retryDelay / 1000} seconds...`);
          await this.sleep(this.retryDelay);
        }
      }
    }
    
    throw new Error(`${description} failed after ${retries} attempts`);
  }

  async checkDatabaseConnection() {
    console.log('üîç Testing database connection...');
    
    try {
      const { Sequelize } = require('sequelize');
      const config = require('./config/config');
      const env = process.env.NODE_ENV || 'production';
      
      const sequelize = new Sequelize(config[env]);
      await sequelize.authenticate();
      await sequelize.close();
      
      console.log('‚úÖ Database connection successful');
      return true;
    } catch (error) {
      console.error('‚ùå Database connection failed:', error.message);
      throw error;
    }
  }

  async runMigrations() {
    console.log('üì¶ Checking and running migrations...');
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π
      const statusResult = await this.runCommand(
        'npx sequelize-cli db:migrate:status',
        'Checking migration status',
        1 // –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
      );
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ - –Ω–µ –≤—ã–ø–æ–ª–Ω–∏—Ç —É–∂–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–µ)
      await this.runCommand(
        'npx sequelize-cli db:migrate',
        'Running database migrations'
      );
      
      console.log('‚úÖ All migrations completed');
      
    } catch (error) {
      console.error('‚ùå Migration process failed:', error.message);
      throw error;
    }
  }

  async runSeeders() {
    console.log('üå± Checking if seeding is needed...');
    
    try {
      const needsSeeding = await this.checkIfSeedingNeeded();
      
      if (needsSeeding) {
        console.log('üì¶ Database needs seeding, running seeders...');
        await this.runCommand(
          'npx sequelize-cli db:seed:all',
          'Running database seeders'
        );
        console.log('‚úÖ Database seeding completed');
      } else {
        console.log('‚úÖ Database already has data, skipping seeders');
      }
      
    } catch (error) {
      console.error('‚ùå Seeding process failed:', error.message);
      // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è —Å–∏–¥–µ—Ä–æ–≤ - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      console.log('‚ö†Ô∏è Continuing without seeders...');
    }
  }

  async checkIfSeedingNeeded() {
    try {
      const { Sequelize } = require('sequelize');
      const config = require('./config/config');
      const env = process.env.NODE_ENV || 'production';
      
      const sequelize = new Sequelize(config[env]);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
      const checkQueries = [
        { table: 'users', query: 'SELECT COUNT(*) as count FROM users' },
        { table: 'departments', query: 'SELECT COUNT(*) as count FROM departments' }
      ];
      
      for (const check of checkQueries) {
        try {
          const [results] = await sequelize.query(check.query);
          const count = results[0].count;
          
          console.log(`üìä Found ${count} records in ${check.table} table`);
          
          if (count > 0) {
            await sequelize.close();
            console.log(`‚úÖ Data exists in ${check.table}, no seeding needed`);
            return false;
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è Could not check ${check.table} table:`, error.message);
        }
      }
      
      await sequelize.close();
      console.log('üì¶ No data found in key tables, seeding is needed');
      return true;
      
    } catch (error) {
      console.log('‚ö†Ô∏è Could not verify seeding status:', error.message);
      console.log('üéØ Will attempt seeding to be safe');
      return true;
    }
  }

  async setupDatabase() {
    console.log('üöÄ === DATABASE SETUP STARTED ===');
    
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      await this.checkDatabaseConnection();
      
      // 2. –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
      await this.runMigrations();
      
      // 3. –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–¥–∏–Ω–≥ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      await this.runSeeders();
      
      console.log('‚úÖ === DATABASE SETUP COMPLETED SUCCESSFULLY ===');
      
    } catch (error) {
      console.error('‚ùå === DATABASE SETUP FAILED ===');
      console.error('Error details:', error.message);
      throw error;
    }
  }
}

module.exports = DatabaseSetup;
