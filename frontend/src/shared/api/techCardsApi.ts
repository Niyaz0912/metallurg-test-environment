const API_BASE = import.meta.env.VITE_API_URL || '/api';

// ========== –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –£–ü–†–û–©–ï–ù–ù–´–ï –¢–ò–ü–´ –î–ê–ù–ù–´–• ==========

interface TechCard {
  id: number;
  // ‚úÖ –û–°–ù–û–í–ù–´–ï –ü–û–õ–Ø
  customer: string;                    // –ó–∞–∫–∞–∑—á–∏–∫
  order: string;                       // –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞  
  productName: string;                 // –ù–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏
  partNumber?: string;                 // –ê—Ä—Ç–∏–∫—É–ª
  quantity: number;                    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
  
  // ‚úÖ PDF –§–ê–ô–õ (–≤–º–µ—Å—Ç–æ —Å–ª–æ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
  pdfUrl?: string;                     // –°—Å—ã–ª–∫–∞ –Ω–∞ PDF —Ñ–∞–π–ª
  pdfFileSize?: number;                // üÜï –†–∞–∑–º–µ—Ä PDF —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
  
  // ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ï –ü–û–õ–Ø
  description?: string;                // –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
  status: 'draft' | 'active' | 'archived';
  totalProducedQuantity: number;       // –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π
  
  // üÜï –ù–û–í–´–ï –ü–û–õ–Ø –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø
  priority: 'low' | 'medium' | 'high' | 'urgent';  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–µ—Ö–∫–∞—Ä—Ç—ã
  plannedEndDate?: string;             // –ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  actualEndDate?: string;              // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  notes?: string;                      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
  
  // ‚úÖ –ú–ï–¢–ê–î–ê–ù–ù–´–ï
  createdAt: string;
  updatedAt: string;
  createdById?: number;
  creator?: {
    id: number;
    firstName: string;
    lastName: string;
  };
  
  // ‚úÖ –°–í–Ø–ó–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï
  executions?: TechCardExecution[];
  accesses?: TechCardAccess[];         // –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–æ–≤
}

interface TechCardExecution {
  id: number;
  techCardId: number;
  executedById: number;
  // ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ï –ü–û–õ–Ø –í–´–ü–û–õ–ù–ï–ù–ò–Ø
  quantityProduced: number;            // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π
  setupNumber?: number;                // –ù–æ–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (1, 2, 3)
  executedAt: string;                  // –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
  
  // ‚úÖ –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨
  executor: {
    id: number;
    firstName: string;
    lastName: string;
  };
}

// ‚úÖ –ò–°–¢–û–†–ò–Ø –î–û–°–¢–£–ü–û–í –ö –¢–ï–•–ö–ê–†–¢–ï
interface TechCardAccess {
  id: number;
  techCardId: number;
  userId: number;
  accessedAt: string;                  // –í—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞
  action: 'view' | 'work';            // –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
  user: {
    id: number;
    firstName: string;
    lastName: string;
  };
}

// üÜï –¢–ò–ü–´ –î–õ–Ø –ù–û–í–´–• –ü–û–õ–ï–ô
export type TechCardPriority = 'low' | 'medium' | 'high' | 'urgent';
export type TechCardStatus = 'draft' | 'active' | 'archived';

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° –°–û–ó–î–ê–ù–ò–Ø
interface CreateTechCardData {
  customer: string;                    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
  order: string;                       // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
  productName: string;                 // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
  quantity: number;                    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
  partNumber?: string;                 // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
  description?: string;                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
  pdfUrl?: string;                     // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ)
  status?: TechCardStatus;
  
  // üÜï –ù–û–í–´–ï –ü–û–õ–Ø
  priority?: TechCardPriority;         // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'medium')
  plannedEndDate?: string;             // –ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  notes?: string;                      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
}

// üÜï –ò–ù–¢–ï–†–§–ï–ô–° –û–ë–ù–û–í–õ–ï–ù–ò–Ø –¢–ï–•–ö–ê–†–¢–´
interface UpdateTechCardData extends Partial<CreateTechCardData> {
  actualEndDate?: string;              // –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  totalProducedQuantity?: number;      // –ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ –¥–µ—Ç–∞–ª–µ–π
}

// ‚úÖ –£–ü–†–û–©–ï–ù–ù–´–ô –ò–ù–¢–ï–†–§–ï–ô–° –í–´–ü–û–õ–ù–ï–ù–ò–Ø
interface CreateExecutionData {
  quantityProduced: number;            // –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ
  setupNumber?: number;                // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
}

// üÜï –ò–ù–¢–ï–†–§–ï–ô–° –§–ò–õ–¨–¢–†–ê–¶–ò–ò
interface TechCardFilters {
  customer?: string;
  status?: TechCardStatus;
  priority?: TechCardPriority;
  dateFrom?: string;
  dateTo?: string;
}

// üÜï –¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø URL –§–ê–ô–õ–û–í
export const getFileUrl = (relativePath: string): string => {
  if (relativePath.startsWith('http')) {
    return relativePath;
  }
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è API –±–∞–∑—ã
  const API_BASE = import.meta.env.VITE_API_URL || '/api';
  
  // –ï—Å–ª–∏ API_BASE —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π URL (–Ω–∞–ø—Ä–∏–º–µ—Ä, http://localhost:3000/api)
  if (API_BASE.startsWith('http')) {
    const baseUrl = API_BASE.replace('/api', '');
    return `${baseUrl}/api/files${relativePath}`;
  }
  
  // –ï—Å–ª–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–π origin
  return `${window.location.origin}/api/files${relativePath}`;
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
const getAuthHeaders = () => {
  const token = localStorage.getItem('token');
  return {
    'Content-Type': 'application/json',
    ...(token && { 'Authorization': `Bearer ${token}` })
  };
};

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è FormData –∑–∞–ø—Ä–æ—Å–æ–≤
const getAuthHeadersForFormData = () => {
  const token = localStorage.getItem('token');
  return {
    ...(token && { 'Authorization': `Bearer ${token}` })
    // Content-Type –Ω–µ —É–∫–∞–∑—ã–≤–∞–µ–º –¥–ª—è FormData - –±—Ä–∞—É–∑–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
  };
};

// ========== –û–°–ù–û–í–ù–´–ï CRUD –û–ü–ï–†–ê–¶–ò–ò ==========

export const fetchTechCards = async (filters?: TechCardFilters): Promise<TechCard[]> => {
  let url = `${API_BASE}/techcards`;
  
  // üÜï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
  if (filters) {
    const params = new URLSearchParams();
    Object.entries(filters).forEach(([key, value]) => {
      if (value) params.append(key, value.toString());
    });
    if (params.toString()) {
      url += `?${params.toString()}`;
    }
  }
  
  const response = await fetch(url, {
    headers: getAuthHeaders()
  });
  
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  return response.json();
};

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ
export const fetchTechCardById = async (id: string): Promise<TechCard> => {
  const response = await fetch(`${API_BASE}/techcards/${id}`, {
    headers: getAuthHeaders()
  });
  
  if (!response.ok) {
    throw new Error(`HTTP error! status: ${response.status}`);
  }
  return response.json();
  // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç —ç—Ç–æ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä –≤ TechCardAccess
};

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Ö–∫–∞—Ä—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
export const createTechCard = async (data: CreateTechCardData): Promise<TechCard> => {
  const response = await fetch(`${API_BASE}/techcards`, {
    method: 'POST',
    headers: getAuthHeaders(),
    body: JSON.stringify({
      ...data,
      priority: data.priority || 'medium', // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }),
  });
  
  if (!response.ok) {
    throw new Error('Failed to create tech card');
  }
  return response.json();
};

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–∫–∞—Ä—Ç—ã —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
export const updateTechCard = async (id: string, updates: UpdateTechCardData): Promise<TechCard> => {
  const response = await fetch(`${API_BASE}/techcards/${id}`, {
    method: 'PUT',
    headers: getAuthHeaders(),
    body: JSON.stringify(updates),
  });
  
  if (!response.ok) {
    throw new Error('Failed to update tech card');
  }
  return response.json();
};

export const deleteTechCard = async (id: string): Promise<{ message: string }> => {
  const response = await fetch(`${API_BASE}/techcards/${id}`, {
    method: 'DELETE',
    headers: getAuthHeaders()
  });
  
  if (!response.ok) {
    throw new Error('Failed to delete tech card');
  }
  return response.json();
};

// ========== –û–ü–ï–†–ê–¶–ò–ò –° –í–´–ü–û–õ–ù–ï–ù–ò–Ø–ú–ò ==========

// ‚úÖ –£–ü–†–û–©–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ + —É—Å—Ç–∞–Ω–æ–≤–∫–∞)
export const addExecution = async (techCardId: string, data: CreateExecutionData): Promise<TechCardExecution> => {
  const response = await fetch(`${API_BASE}/techcards/${techCardId}/executions`, {
    method: 'POST',
    headers: getAuthHeaders(),
    body: JSON.stringify(data),
  });
  
  if (!response.ok) {
    throw new Error('Failed to add execution');
  }
  return response.json();
  // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —Å–µ—Ä–≤–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ª–æ–≥–∏—Ä—É–µ—Ç —ç—Ç–æ –∫–∞–∫ action='work'
};

// ========== –û–ü–ï–†–ê–¶–ò–ò –° PDF –§–ê–ô–õ–ê–ú–ò ==========

// ‚úÖ –û–ë–ù–û–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∑–∫–∞ PDF —Ñ–∞–π–ª–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ä–∞–∑–º–µ—Ä–∞
export const uploadPdf = async (techCardId: string, file: File): Promise<{ pdfUrl: string; pdfFileSize: number; message: string }> => {
  const formData = new FormData();
  formData.append('pdf', file);

  const response = await fetch(`${API_BASE}/techcards/${techCardId}/upload-pdf`, {
    method: 'POST',
    headers: getAuthHeadersForFormData(),
    body: formData,
  });
  
  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.error || 'Failed to upload PDF');
  }
  return response.json();
};

// ‚úÖ LEGACY: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ API –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const uploadDrawing = async (techCardId: string, file: File): Promise<{ drawingUrl: string; pdfUrl: string }> => {
  const formData = new FormData();
  formData.append('drawing', file);

  const response = await fetch(`${API_BASE}/techcards/${techCardId}/upload-drawing`, {
    method: 'POST',
    headers: getAuthHeadersForFormData(),
    body: formData,
  });
  
  if (!response.ok) {
    throw new Error('Failed to upload drawing');
  }
  return response.json();
};

// ========== –ò–°–¢–û–†–ò–Ø –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê ==========

// ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –ò–°–¢–û–†–ò–ò –î–û–°–¢–£–ü–û–í –ö –¢–ï–•–ö–ê–†–¢–ï
export const fetchTechCardAccesses = async (techCardId: string): Promise<TechCardAccess[]> => {
  const response = await fetch(`${API_BASE}/techcards/${techCardId}/accesses`, {
    headers: getAuthHeaders()
  });
  
  if (!response.ok) {
    throw new Error('Failed to fetch tech card accesses');
  }
  return response.json();
};

// ========== –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï–ú ==========

// üÜï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–ò–û–†–ò–¢–ï–¢–ê –¢–ï–•–ö–ê–†–¢–´
export const updateTechCardPriority = async (id: string, priority: TechCardPriority): Promise<TechCard> => {
  return updateTechCard(id, { priority });
};

// üÜï –£–°–¢–ê–ù–û–í–ö–ê –ü–õ–ê–ù–û–í–û–ô –î–ê–¢–´ –ó–ê–í–ï–†–®–ï–ù–ò–Ø
export const setPlannedEndDate = async (id: string, plannedEndDate: string): Promise<TechCard> => {
  return updateTechCard(id, { plannedEndDate });
};

// üÜï –ó–ê–í–ï–†–®–ï–ù–ò–ï –¢–ï–•–ö–ê–†–¢–´ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –¥–∞—Ç—ã)
export const completeTechCard = async (id: string): Promise<TechCard> => {
  const now = new Date().toISOString();
  return updateTechCard(id, { 
    actualEndDate: now,
    status: 'archived'
  });
};

// üÜï –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–ú–ï–¢–ö–ò –ö –¢–ï–•–ö–ê–†–¢–ï
export const addNoteToTechCard = async (id: string, note: string): Promise<TechCard> => {
  const techCard = await fetchTechCardById(id);
  const existingNotes = techCard.notes || '';
  const timestamp = new Date().toLocaleString('ru-RU');
  const newNote = `[${timestamp}] ${note}`;
  const updatedNotes = existingNotes 
    ? `${existingNotes}\n${newNote}`
    : newNote;
  
  return updateTechCard(id, { notes: updatedNotes });
};

// ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========

export const updateTechCardStatus = async (id: string, status: TechCardStatus): Promise<TechCard> => {
  return updateTechCard(id, { status });
};

export const getTechCardsByStatus = async (status: TechCardStatus): Promise<TechCard[]> => {
  return fetchTechCards({ status });
};

// üÜï –ü–û–õ–£–ß–ï–ù–ò–ï –¢–ï–•–ö–ê–†–¢ –ü–û –ü–†–ò–û–†–ò–¢–ï–¢–£
export const getTechCardsByPriority = async (priority: TechCardPriority): Promise<TechCard[]> => {
  return fetchTechCards({ priority });
};

// üÜï –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–°–†–û–ß–ï–ù–ù–´–• –¢–ï–•–ö–ê–†–¢
export const getOverdueTechCards = async (): Promise<TechCard[]> => {
  const allCards = await fetchTechCards();
  const now = new Date();
  
  return allCards.filter(card => 
    card.plannedEndDate && 
    new Date(card.plannedEndDate) < now && 
    card.status === 'active' && 
    !card.actualEndDate
  );
};

// ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–†–û–ì–†–ï–°–°–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø –¢–ï–•–ö–ê–†–¢–´
export const getTechCardProgress = (techCard: TechCard): number => {
  if (techCard.quantity === 0) return 0;
  return Math.round((techCard.totalProducedQuantity / techCard.quantity) * 100);
};

// üÜï –ü–†–û–í–ï–†–ö–ê –ü–†–û–°–†–û–ß–ö–ò –¢–ï–•–ö–ê–†–¢–´
export const isTechCardOverdue = (techCard: TechCard): boolean => {
  if (!techCard.plannedEndDate || techCard.actualEndDate || techCard.status !== 'active') {
    return false;
  }
  return new Date(techCard.plannedEndDate) < new Date();
};

// üÜï –ü–û–õ–£–ß–ï–ù–ò–ï –î–ù–ï–ô –î–û –î–ï–î–õ–ê–ô–ù–ê
export const getDaysToDeadline = (techCard: TechCard): number | null => {
  if (!techCard.plannedEndDate || techCard.actualEndDate) return null;
  
  const now = new Date();
  const deadline = new Date(techCard.plannedEndDate);
  const diffTime = deadline.getTime() - now.getTime();
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  
  return diffDays;
};

// üÜï –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–ú–ï–†–ê –§–ê–ô–õ–ê
export const formatFileSize = (sizeInBytes?: number): string => {
  if (!sizeInBytes) return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  
  const units = ['–ë', '–ö–ë', '–ú–ë', '–ì–ë'];
  let size = sizeInBytes;
  let unitIndex = 0;
  
  while (size >= 1024 && unitIndex < units.length - 1) {
    size /= 1024;
    unitIndex++;
  }
  
  return `${size.toFixed(1)} ${units[unitIndex]}`;
};

// ‚úÖ –ü–û–î–°–ß–ï–¢ –£–ù–ò–ö–ê–õ–¨–ù–´–• –û–ü–ï–†–ê–¢–û–†–û–í –†–ê–ë–û–¢–ê–í–®–ò–• –° –¢–ï–•–ö–ê–†–¢–û–ô
export const getUniqueOperatorsCount = (techCard: TechCard): number => {
  if (!techCard.executions) return 0;
  const uniqueOperators = new Set(techCard.executions.map(exec => exec.executedById));
  return uniqueOperators.size;
};

// ‚úÖ –ü–û–õ–£–ß–ï–ù–ò–ï –ü–û–°–õ–ï–î–ù–ï–ô –ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–û –¢–ï–•–ö–ê–†–¢–ï
export const getLastActivity = (techCard: TechCard): string | null => {
  if (!techCard.executions || techCard.executions.length === 0) return null;
  
  const lastExecution = techCard.executions
    .sort((a, b) => new Date(b.executedAt).getTime() - new Date(a.executedAt).getTime())[0];
  
  return lastExecution.executedAt;
};

// üÜï –ü–û–õ–£–ß–ï–ù–ò–ï –¶–í–ï–¢–ê –ü–†–ò–û–†–ò–¢–ï–¢–ê –î–õ–Ø UI
export const getPriorityColor = (priority: TechCardPriority): string => {
  const colors = {
    low: '#10b981',      // green-500
    medium: '#f59e0b',   // amber-500  
    high: '#f97316',     // orange-500
    urgent: '#ef4444'    // red-500
  };
  return colors[priority];
};

// üÜï –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ü–û –¢–ï–•–ö–ê–†–¢–ê–ú
export const getTechCardsStats = async () => {
  const allCards = await fetchTechCards();
  
  return {
    total: allCards.length,
    byStatus: {
      draft: allCards.filter(c => c.status === 'draft').length,
      active: allCards.filter(c => c.status === 'active').length,
      archived: allCards.filter(c => c.status === 'archived').length,
    },
    byPriority: {
      low: allCards.filter(c => c.priority === 'low').length,
      medium: allCards.filter(c => c.priority === 'medium').length,
      high: allCards.filter(c => c.priority === 'high').length,
      urgent: allCards.filter(c => c.priority === 'urgent').length,
    },
    overdue: allCards.filter(c => isTechCardOverdue(c)).length,
    totalProduced: allCards.reduce((sum, c) => sum + c.totalProducedQuantity, 0),
    totalPlanned: allCards.reduce((sum, c) => sum + c.quantity, 0),
  };
};

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export type { 
  TechCard, 
  TechCardExecution, 
  TechCardAccess,
  CreateTechCardData, 
  CreateExecutionData,
  UpdateTechCardData,
  TechCardFilters,
};
;

