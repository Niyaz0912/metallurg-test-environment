// frontend/src/features/techCard/components/TechCardForm.tsx
import React, { useState } from 'react';
import {
  createTechCard,
  updateTechCard,
  uploadPdf,
  type CreateTechCardData,
  type TechCard
} from '../../../shared/api/techCardsApi';

interface TechCardFormProps {
  techCard?: TechCard;
  onSuccess: () => void;
  onCancel: () => void;
}

const TechCardForm: React.FC<TechCardFormProps> = ({ techCard, onSuccess, onCancel }) => {
  const isEditing = !!techCard;

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
  const [formData, setFormData] = useState<CreateTechCardData>({
    customer: techCard?.customer || '',
    order: techCard?.order || '',
    productName: techCard?.productName || '',
    quantity: techCard?.quantity || 0,
    partNumber: techCard?.partNumber || '',
    description: techCard?.description || '',
    status: techCard?.status || 'draft',
    // üÜï –ù–æ–≤—ã–µ –ø–æ–ª—è
    priority: techCard?.priority || 'medium',
    plannedEndDate: techCard?.plannedEndDate ? techCard.plannedEndDate.split('T')[0] : '',
    notes: techCard?.notes || ''
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
  const [pdfFile, setPdfFile] = useState<File | null>(null);
  const [isDragOver, setIsDragOver] = useState(false);
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState<Record<string, string>>({});

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    const newErrors: Record<string, string> = {};

    if (!formData.customer.trim()) {
      newErrors.customer = '–ó–∞–∫–∞–∑—á–∏–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    }

    if (!formData.order.trim()) {
      newErrors.order = '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    }

    if (!formData.productName.trim()) {
      newErrors.productName = '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    if (!formData.quantity || formData.quantity < 1) {
      newErrors.quantity = '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0';
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ PDF —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤–æ–π —Ç–µ—Ö–∫–∞—Ä—Ç—ã    
    if (!pdfFile) {
      if (!isEditing) {
        newErrors.pdfFile = 'PDF —Ñ–∞–π–ª —Å —Ç–µ—Ö–∫–∞—Ä—Ç–æ–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
      } else if (!techCard?.pdfUrl) {
        newErrors.pdfFile = 'PDF —Ñ–∞–π–ª —Å —Ç–µ—Ö–∫–∞—Ä—Ç–æ–π –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
      }
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
  const handleInputChange = (field: keyof CreateTechCardData, value: string | number) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  // Drag & Drop –¥–ª—è PDF —Ñ–∞–π–ª–∞
  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);

    const files = Array.from(e.dataTransfer.files);
    const pdfFile = files.find(file => file.type === 'application/pdf' || file.name.toLowerCase().endsWith('.pdf'));

    if (pdfFile) {
      if (pdfFile.size > 10 * 1024 * 1024) { // 10MB
        setErrors(prev => ({ ...prev, pdfFile: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB' }));
        return;
      }
      setPdfFile(pdfFile);
      setErrors(prev => ({ ...prev, pdfFile: '' }));
    } else {
      setErrors(prev => ({ ...prev, pdfFile: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª' }));
    }
  };

  // –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ input
  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (file.size > 10 * 1024 * 1024) { // 10MB
        setErrors(prev => ({ ...prev, pdfFile: '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 10MB' }));
        return;
      }
      setPdfFile(file);
      setErrors(prev => ({ ...prev, pdfFile: '' }));
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    if (!validateForm()) {
      return;
    }

    setLoading(true);

    try {
      let savedTechCard: TechCard;

      if (isEditing && techCard) {
        savedTechCard = await updateTechCard(techCard.id.toString(), formData);
      } else {
        savedTechCard = await createTechCard(formData);
      }

      if (pdfFile) {
        await uploadPdf(savedTechCard.id.toString(), pdfFile);
      }

      onSuccess();
    } catch (error) {
      console.error('Error saving tech card:', error);
      setErrors({ submit: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ—Ö–∫–∞—Ä—Ç—ã' });
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="sticky top-0 bg-white border-b px-6 py-4 flex justify-between items-center">
          <h2 className="text-2xl font-bold text-gray-900">
            {isEditing ? '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–∫–∞—Ä—Ç—ã' : '‚ûï –ù–æ–≤–∞—è —Ç–µ—Ö–∫–∞—Ä—Ç–∞'}
          </h2>
          <button
            onClick={onCancel}
            className="px-4 py-2 bg-gray-500 text-white rounded hover:bg-gray-600"
            disabled={loading}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-6">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="bg-indigo-50 border-l-4 border-indigo-400 p-4 mb-6">
            <h3 className="text-lg font-semibold text-indigo-900 mb-2">
              üìã –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            </h3>
            <p className="text-indigo-700 text-sm">
              –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ—Ö–∫–∞—Ä—Ç–µ. –ü–æ–ª—è –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ * –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {/* –ó–∞–∫–∞–∑—á–∏–∫ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                üè¢ –ó–∞–∫–∞–∑—á–∏–∫ *
              </label>
              <input
                type="text"
                value={formData.customer}
                onChange={(e) => handleInputChange('customer', e.target.value)}
                className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-500 ${
                  errors.customer ? 'border-red-300' : 'border-gray-300'
                }`}
                placeholder="–ü–ê–û –°–µ–≤–µ—Ä—Å—Ç–∞–ª—å"
                disabled={loading}
              />
              {errors.customer && (
                <p className="text-red-600 text-sm mt-1">{errors.customer}</p>
              )}
            </div>

            {/* –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                üìã –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ *
              </label>
              <input
                type="text"
                value={formData.order}
                onChange={(e) => handleInputChange('order', e.target.value)}
                className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-500 ${
                  errors.order ? 'border-red-300' : 'border-gray-300'
                }`}
                placeholder="‚Ññ12345"
                disabled={loading}
              />
              {errors.order && (
                <p className="text-red-600 text-sm mt-1">{errors.order}</p>
              )}
            </div>

            {/* –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                üîß –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ *
              </label>
              <input
                type="text"
                value={formData.productName}
                onChange={(e) => handleInputChange('productName', e.target.value)}
                className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-500 ${
                  errors.productName ? 'border-red-300' : 'border-gray-300'
                }`}
                placeholder="–†–æ–ª–∏–∫ (–ø–æ—Å–ª–µ —Ç–µ—Ä–º–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏)"
                disabled={loading}
              />
              {errors.productName && (
                <p className="text-red-600 text-sm mt-1">{errors.productName}</p>
              )}
            </div>

            {/* –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ç–∞–ª–µ–π *
              </label>
              <input
                type="number"
                value={formData.quantity || ''}
                onChange={(e) => handleInputChange('quantity', parseInt(e.target.value) || 0)}
                className={`w-full px-3 py-2 border rounded-lg focus:ring-2 focus:ring-indigo-500 ${
                  errors.quantity ? 'border-red-300' : 'border-gray-300'
                }`}
                placeholder="1500"
                min="1"
                disabled={loading}
              />
              {errors.quantity && (
                <p className="text-red-600 text-sm mt-1">{errors.quantity}</p>
              )}
            </div>

            {/* –ê—Ä—Ç–∏–∫—É–ª */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                üè∑Ô∏è –ê—Ä—Ç–∏–∫—É–ª
              </label>
              <input
                type="text"
                value={formData.partNumber || ''}
                onChange={(e) => handleInputChange('partNumber', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
                placeholder="–ú–ì 333015.02.001"
                disabled={loading}
              />
            </div>

            {/* üÜï –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
              </label>
              <select
                value={formData.priority}
                onChange={(e) => handleInputChange('priority', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
                disabled={loading}
              >
                <option value="low">üü¢ –ù–∏–∑–∫–∏–π</option>
                <option value="medium">üü° –°—Ä–µ–¥–Ω–∏–π</option>
                <option value="high">üü† –í—ã—Å–æ–∫–∏–π</option>
                <option value="urgent">üî¥ –°—Ä–æ—á–Ω—ã–π</option>
              </select>
            </div>

            {/* üÜï –ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                üìÖ –ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
              </label>
              <input
                type="date"
                value={formData.plannedEndDate || ''}
                onChange={(e) => handleInputChange('plannedEndDate', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
                disabled={loading}
              />
            </div>

            {/* –°—Ç–∞—Ç—É—Å */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                ‚úÖ –°—Ç–∞—Ç—É—Å
              </label>
              <select
                value={formData.status}
                onChange={(e) => handleInputChange('status', e.target.value)}
                className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
                disabled={loading}
              >
                <option value="draft">üìù –ß–µ—Ä–Ω–æ–≤–∏–∫</option>
                <option value="active">‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è</option>
                <option value="archived">üìÅ –ê—Ä—Ö–∏–≤</option>
              </select>
            </div>
          </div>

          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              üìÑ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            </label>
            <textarea
              value={formData.description || ''}
              onChange={(e) => handleInputChange('description', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
              rows={3}
              placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞"
              disabled={loading}
            />
          </div>

          {/* üÜï –ó–∞–º–µ—Ç–∫–∏ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              üìù –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏
            </label>
            <textarea
              value={formData.notes || ''}
              onChange={(e) => handleInputChange('notes', e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
              rows={2}
              placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏..."
              disabled={loading}
            />
          </div>

          {/* –ó–∞–≥—Ä—É–∑–∫–∞ PDF —Ñ–∞–π–ª–∞ */}
          <div className="bg-gray-50 rounded-lg p-4">
            <h3 className="text-lg font-semibold text-gray-900 mb-3">
              üìé PDF —Ñ–∞–π–ª —Å —Ç–µ—Ö–∫–∞—Ä—Ç–æ–π {!isEditing && '*'}
            </h3>

            {/* –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª (–ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏) */}
            {techCard?.pdfUrl && (
              <div className="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                <p className="text-sm text-blue-700">
                  üìÑ –¢–µ–∫—É—â–∏–π —Ñ–∞–π–ª:
                  <a
                    href={techCard.pdfUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="ml-2 underline hover:no-underline"
                  >
                    –û—Ç–∫—Ä—ã—Ç—å PDF
                  </a>
                </p>
              </div>
            )}

            {/* Drag & Drop –∑–æ–Ω–∞ */}
            <div
              onDragOver={handleDragOver}
              onDragLeave={handleDragLeave}
              onDrop={handleDrop}
              className={`border-2 border-dashed rounded-lg p-8 text-center transition-colors ${
                isDragOver
                  ? 'border-indigo-400 bg-indigo-50'
                  : errors.pdfFile
                  ? 'border-red-300 bg-red-50'
                  : 'border-gray-300 bg-gray-50'
              }`}
            >
              {pdfFile ? (
                <div className="space-y-2">
                  <div className="text-green-600 text-4xl">üìÑ</div>
                  <p className="text-green-700 font-medium">{pdfFile.name}</p>
                  <p className="text-sm text-gray-500">
                    {(pdfFile.size / 1024 / 1024).toFixed(2)} MB
                  </p>
                  <button
                    type="button"
                    onClick={() => setPdfFile(null)}
                    className="text-red-600 hover:text-red-800 text-sm underline"
                  >
                    –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
                  </button>
                </div>
              ) : (
                <div className="space-y-3">
                  <div className="text-gray-400 text-5xl">üìé</div>
                  <div>
                    <p className="text-gray-600 font-medium">
                      –ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ PDF —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞
                    </p>
                    <p className="text-sm text-gray-500 mt-1">
                      –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10 –ú–ë. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–æ—Ä–º–∞—Ç.
                    </p>
                  </div>
                  <input
                    type="file"
                    accept=".pdf,application/pdf"
                    onChange={handleFileSelect}
                    className="hidden"
                    id="pdf-upload"
                    disabled={loading}
                  />
                  <label
                    htmlFor="pdf-upload"
                    className="inline-block px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 cursor-pointer transition-colors"
                  >
                    –í—ã–±—Ä–∞—Ç—å PDF —Ñ–∞–π–ª
                  </label>
                </div>
              )}
            </div>

            {errors.pdfFile && (
              <p className="text-red-600 text-sm mt-2">{errors.pdfFile}</p>
            )}
          </div>

          {/* –û—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ */}
          {errors.submit && (
            <div className="bg-red-50 border border-red-200 rounded-lg p-4">
              <p className="text-red-700">{errors.submit}</p>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          <div className="flex justify-end space-x-3 pt-4 border-t">
            <button
              type="button"
              onClick={onCancel}
              className="px-6 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400 transition-colors"
              disabled={loading}
            >
              –û—Ç–º–µ–Ω–∞
            </button>
            <button
              type="submit"
              className="px-6 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700 disabled:bg-indigo-400 disabled:cursor-not-allowed transition-colors"
              disabled={loading}
            >
              {loading ? (
                <span className="flex items-center space-x-2">
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                  <span>–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...</span>
                </span>
              ) : (
                isEditing ? '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è' : '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–∫–∞—Ä—Ç—É'
              )}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default TechCardForm;
