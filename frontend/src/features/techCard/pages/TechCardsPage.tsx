// frontend/src/features/techCard/TechCardsPage.tsx
import React, { useState, useEffect } from 'react';

import {
  fetchTechCards,
  deleteTechCard,
  updateTechCardStatus,
  type TechCard,
} from '../../../shared/api/techCardsApi';
import { useAuth } from '../../auth/hooks/useAuth';

import TechCardForm from '../components/TechCardForm';
import TechCardList from '../components/TechCardList';
import TechCardViewer from '../components/TechCardViewer';

const TechCardsPage: React.FC = () => {
  const { user } = useAuth();

  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [techCards, setTechCards] = useState<TechCard[]>([]);
  const [filteredCards, setFilteredCards] = useState<TechCard[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [showEditForm, setShowEditForm] = useState(false);
  const [showViewer, setShowViewer] = useState(false);
  const [selectedCard, setSelectedCard] = useState<TechCard | null>(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);

  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ï —Ñ–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [customerFilter, setCustomerFilter] = useState<string>('all');

  // –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  const canManage = user?.role === 'master' || user?.role === 'admin';
  const canView = ['master', 'admin', 'employee', 'director'].includes(user?.role || '');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const loadTechCards = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await fetchTechCards();
      setTechCards(data);
      setFilteredCards(data);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç');
      console.error('Error loading tech cards:', err);
    } finally {
      setLoading(false);
    }
  };

  // –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  useEffect(() => {
    if (canView) {
      loadTechCards();
    }
  }, [canView]);

  // ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫
  useEffect(() => {
    let filtered = techCards;

    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞—Ä—Ç–∏–∫—É–ª—É, –∑–∞–∫–∞–∑—á–∏–∫—É –∏ –∑–∞–∫–∞–∑—É
    if (searchQuery) {
      filtered = filtered.filter(card =>
        card.productName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (card.partNumber && card.partNumber.toLowerCase().includes(searchQuery.toLowerCase())) ||
        card.customer.toLowerCase().includes(searchQuery.toLowerCase()) ||
        card.order.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (statusFilter !== 'all') {
      filtered = filtered.filter(card => card.status === statusFilter);
    }

    // ‚úÖ –ù–û–í–´–ô —Ñ–∏–ª—å—Ç—Ä –ø–æ –∑–∞–∫–∞–∑—á–∏–∫–∞–º
    if (customerFilter !== 'all') {
      filtered = filtered.filter(card => card.customer === customerFilter);
    }

    setFilteredCards(filtered);
  }, [searchQuery, statusFilter, customerFilter, techCards]);

  // ‚úÖ –ù–û–í–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
  const getUniqueCustomers = () => {
    const customers = Array.from(new Set(techCards.map(card => card.customer)));
    return customers.sort();
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleCreateCard = () => {
    setSelectedCard(null);
    setShowCreateForm(true);
    setShowEditForm(false);
    setShowViewer(false);
  };

  const handleEditCard = (card: TechCard) => {
    setSelectedCard(card);
    setShowEditForm(true);
    setShowCreateForm(false);
    setShowViewer(false);
  };

  const handleViewCard = (card: TechCard) => {
    setSelectedCard(card);
    setShowViewer(true);
    setShowCreateForm(false);
    setShowEditForm(false);
  };

  const handleDeleteCard = (card: TechCard) => {
    setSelectedCard(card);
    setShowDeleteConfirm(true);
  };

  const handleConfirmDelete = async () => {
    if (!selectedCard) return;

    try {
      await deleteTechCard(selectedCard.id.toString());
      await loadTechCards();
      setShowDeleteConfirm(false);
      setSelectedCard(null);
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Ö–∫–∞—Ä—Ç—ã');
      console.error('Error deleting tech card:', err);
    }
  };

  const handleStatusChange = async (card: TechCard, newStatus: 'draft' | 'active' | 'archived') => {
    try {
      await updateTechCardStatus(card.id.toString(), newStatus);
      await loadTechCards();
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
      console.error('Error updating status:', err);
    }
  };

  const handleFormSuccess = () => {
    setShowCreateForm(false);
    setShowEditForm(false);
    setSelectedCard(null);
    loadTechCards();
  };

  const closeAllModals = () => {
    setShowCreateForm(false);
    setShowEditForm(false);
    setShowViewer(false);
    setShowDeleteConfirm(false);
    setSelectedCard(null);
  };

  // ‚úÖ –ù–û–í–´–ï —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
  const statsData = {
    total: techCards.length,
    drafts: techCards.filter(c => c.status === 'draft').length,
    active: techCards.filter(c => c.status === 'active').length,
    archived: techCards.filter(c => c.status === 'archived').length,
    totalQuantity: techCards.reduce((sum, card) => sum + card.quantity, 0),
    totalProduced: techCards.reduce((sum, card) => sum + card.totalProducedQuantity, 0),
    uniqueCustomers: getUniqueCustomers().length,
    withPdf: techCards.filter(c => c.pdfUrl).length
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  if (!canView) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <div className="text-6xl text-gray-400 mb-4">üö´</div>
          <h2 className="text-xl font-semibold text-gray-700">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</h2>
          <p className="text-gray-500">–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-gradient-to-r from-indigo-50 to-blue-50 border-l-4 border-indigo-400 p-6 rounded-lg">
        <h1 className="text-3xl font-bold text-indigo-900 mb-2">
          üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
        </h1>
        <p className="text-indigo-700">
          –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–∫–∞—Ä—Ç–∞–º–∏ —Å PDF —Ñ–∞–π–ª–∞–º–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º
        </p>
        <div className="flex items-center space-x-4 mt-3 text-sm text-indigo-600">
          <span>üìä –í—Å–µ–≥–æ: {statsData.total}</span>
          <span>üè¢ –ó–∞–∫–∞–∑—á–∏–∫–æ–≤: {statsData.uniqueCustomers}</span>
          <span>üìÑ –° PDF: {statsData.withPdf}</span>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="bg-white rounded-lg shadow-sm border p-6">
        {/* ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4 mb-6">
          <div className="flex flex-col sm:flex-row gap-4 flex-1">
            {/* –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ */}
            <div className="flex-1">
              <input
                type="text"
                placeholder="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é, –∞—Ä—Ç–∏–∫—É–ª—É, –∑–∞–∫–∞–∑—á–∏–∫—É –∏–ª–∏ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-colors"
              />
            </div>

            {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É */}
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              <option value="draft">üìù –ß–µ—Ä–Ω–æ–≤–∏–∫</option>
              <option value="active">‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ</option>
              <option value="archived">üìÅ –ê—Ä—Ö–∏–≤</option>
            </select>

            {/* ‚úÖ –ù–û–í–´–ô —Ñ–∏–ª—å—Ç—Ä –ø–æ –∑–∞–∫–∞–∑—á–∏–∫–∞–º */}
            <select
              value={customerFilter}
              onChange={(e) => setCustomerFilter(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="all">–í—Å–µ –∑–∞–∫–∞–∑—á–∏–∫–∏</option>
              {getUniqueCustomers().map(customer => (
                <option key={customer} value={customer}>{customer}</option>
              ))}
            </select>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          {canManage && (
            <div className="flex gap-2">
              <button
                onClick={handleCreateCard}
                className="px-6 py-2 bg-gradient-to-r from-indigo-600 to-blue-600 text-white rounded-lg hover:from-indigo-700 hover:to-blue-700 transition-all duration-200 font-medium shadow-sm"
              >
                ‚ûï –°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–∫–∞—Ä—Ç—É
              </button>
            </div>
          )}
        </div>

        {/* ‚úÖ –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-2 sm:grid-cols-4 lg:grid-cols-6 gap-4 mb-6">
          <div className="bg-gray-50 rounded-lg p-4 text-center">
            <p className="text-2xl font-bold text-gray-900">{statsData.total}</p>
            <p className="text-sm text-gray-600">–í—Å–µ–≥–æ —Ç–µ—Ö–∫–∞—Ä—Ç</p>
          </div>
          <div className="bg-yellow-50 rounded-lg p-4 text-center">
            <p className="text-2xl font-bold text-yellow-700">{statsData.drafts}</p>
            <p className="text-sm text-yellow-600">–ß–µ—Ä–Ω–æ–≤–∏–∫–∏</p>
          </div>
          <div className="bg-green-50 rounded-lg p-4 text-center">
            <p className="text-2xl font-bold text-green-700">{statsData.active}</p>
            <p className="text-sm text-green-600">–ê–∫—Ç–∏–≤–Ω—ã–µ</p>
          </div>
          <div className="bg-indigo-50 rounded-lg p-4 text-center">
            <p className="text-2xl font-bold text-indigo-700">{statsData.totalQuantity.toLocaleString()}</p>
            <p className="text-sm text-indigo-600">–ü–ª–∞–Ω (—à—Ç)</p>
          </div>
          <div className="bg-emerald-50 rounded-lg p-4 text-center">
            <p className="text-2xl font-bold text-emerald-700">{statsData.totalProduced.toLocaleString()}</p>
            <p className="text-sm text-emerald-600">–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ</p>
          </div>
          <div className="bg-blue-50 rounded-lg p-4 text-center">
            <p className="text-2xl font-bold text-blue-700">{statsData.uniqueCustomers}</p>
            <p className="text-sm text-blue-600">–ó–∞–∫–∞–∑—á–∏–∫–æ–≤</p>
          </div>
        </div>

        {/* –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã */}
        {(searchQuery || statusFilter !== 'all' || customerFilter !== 'all') && (
          <div className="mb-4 flex flex-wrap items-center gap-2">
            <span className="text-sm text-gray-600">–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</span>
            {searchQuery && (
              <span className="px-2 py-1 bg-blue-100 text-blue-800 rounded text-sm">
                –ü–æ–∏—Å–∫: "{searchQuery}"
                <button
                  onClick={() => setSearchQuery('')}
                  className="ml-1 text-blue-600 hover:text-blue-800"
                >
                  √ó
                </button>
              </span>
            )}
            {statusFilter !== 'all' && (
              <span className="px-2 py-1 bg-green-100 text-green-800 rounded text-sm">
                –°—Ç–∞—Ç—É—Å: {statusFilter}
                <button
                  onClick={() => setStatusFilter('all')}
                  className="ml-1 text-green-600 hover:text-green-800"
                >
                  √ó
                </button>
              </span>
            )}
            {customerFilter !== 'all' && (
              <span className="px-2 py-1 bg-purple-100 text-purple-800 rounded text-sm">
                –ó–∞–∫–∞–∑—á–∏–∫: {customerFilter}
                <button
                  onClick={() => setCustomerFilter('all')}
                  className="ml-1 text-purple-600 hover:text-purple-800"
                >
                  √ó
                </button>
              </span>
            )}
            <button
              onClick={() => {
                setSearchQuery('');
                setStatusFilter('all');
                setCustomerFilter('all');
              }}
              className="text-sm text-red-600 hover:text-red-800 underline"
            >
              –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
            </button>
          </div>
        )}

        {/* –°–ø–∏—Å–æ–∫ —Ç–µ—Ö–∫–∞—Ä—Ç */}
        {loading ? (
          <div className="flex justify-center items-center h-32">
            <div className="flex items-center space-x-3">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-500"></div>
              <span className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ—Ö–∫–∞—Ä—Ç...</span>
            </div>
          </div>
        ) : error ? (
          <div className="text-center py-8">
            <div className="text-red-500 text-4xl mb-4">‚ö†Ô∏è</div>
            <p className="text-red-600 mb-4">{error}</p>
            <button
              onClick={loadTechCards}
              className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            </button>
          </div>
        ) : filteredCards.length === 0 ? (
          <div className="text-center py-12">
            <div className="text-gray-400 text-6xl mb-4">
              {searchQuery || statusFilter !== 'all' || customerFilter !== 'all' ? 'üîç' : 'üìÑ'}
            </div>
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              {searchQuery || statusFilter !== 'all' || customerFilter !== 'all'
                ? '–¢–µ—Ö–∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã'
                : '–ü–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç'}
            </h3>
            <p className="text-gray-500 mb-4">
              {searchQuery || statusFilter !== 'all' || customerFilter !== 'all'
                ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞'
                : '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ç–µ—Ö–∫–∞—Ä—Ç—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã'}
            </p>
            {canManage && !searchQuery && statusFilter === 'all' && customerFilter === 'all' && (
              <button
                onClick={handleCreateCard}
                className="px-6 py-3 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors font-medium"
              >
                ‚ûï –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Ç–µ—Ö–∫–∞—Ä—Ç—É
              </button>
            )}
          </div>
        ) : (
          <>
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö */}
            <div className="flex justify-between items-center mb-4">
              <p className="text-sm text-gray-600">
                –ü–æ–∫–∞–∑–∞–Ω–æ {filteredCards.length} –∏–∑ {techCards.length} —Ç–µ—Ö–∫–∞—Ä—Ç
              </p>
              {filteredCards.length !== techCards.length && (
                <p className="text-sm text-gray-500">
                  –ü—Ä–∏–º–µ–Ω–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã
                </p>
              )}
            </div>

            <TechCardList
              techCards={filteredCards}
              onView={handleViewCard}
              onEdit={canManage ? handleEditCard : undefined}
              onDelete={canManage ? handleDeleteCard : undefined}
              onStatusChange={canManage ? handleStatusChange : undefined}
            />
          </>
        )}
      </div>

      {/* ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      {showCreateForm && (
        <TechCardForm
          onSuccess={handleFormSuccess}
          onClose={closeAllModals}
        />
      )}

      {showEditForm && selectedCard && (
        <TechCardForm
          techCard={selectedCard}
          onSuccess={handleFormSuccess}
          onClose={closeAllModals}
        />
      )}

      {showViewer && selectedCard && (
        <TechCardViewer
          techCard={selectedCard}
          onClose={closeAllModals}
          onEdit={canManage ? () => handleEditCard(selectedCard) : undefined}
        />
      )}

      {/* ‚úÖ –£–õ–£–ß–®–ï–ù–ù–û–ï –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è */}
      {showDeleteConfirm && selectedCard && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4">
            <div className="p-6">
              <div className="flex items-center space-x-3 mb-4">
                <div className="text-red-500 text-3xl">‚ö†Ô∏è</div>
                <h3 className="text-lg font-bold text-red-600">
                  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
                </h3>
              </div>

              <div className="mb-6">
                <p className="text-gray-700 mb-4">
                  –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ—Ö–∫–∞—Ä—Ç—É?
                </p>

                <div className="bg-gray-50 rounded-lg p-3 mb-4">
                  <p className="font-medium text-gray-900">{selectedCard.productName}</p>
                  <p className="text-sm text-gray-600">–ó–∞–∫–∞–∑—á–∏–∫: {selectedCard.customer}</p>
                  <p className="text-sm text-gray-600">–ó–∞–∫–∞–∑: {selectedCard.order}</p>
                  {selectedCard.partNumber && (
                    <p className="text-sm text-gray-600">–ê—Ä—Ç–∏–∫—É–ª: {selectedCard.partNumber}</p>
                  )}
                </div>

                <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                  <p className="text-red-700 text-sm font-medium">
                    ‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
                  </p>
                  <p className="text-red-600 text-sm mt-1">
                    –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è, –∏—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç—É–ø–æ–≤) —Ç–∞–∫–∂–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.
                  </p>
                </div>
              </div>

              <div className="flex gap-3">
                <button
                  onClick={() => setShowDeleteConfirm(false)}
                  className="flex-1 px-4 py-2 bg-gray-200 text-gray-800 rounded-lg hover:bg-gray-300 transition-colors font-medium"
                >
                  –û—Ç–º–µ–Ω–∏—Ç—å
                </button>
                <button
                  onClick={handleConfirmDelete}
                  className="flex-1 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors font-medium"
                >
                  –£–¥–∞–ª–∏—Ç—å —Ç–µ—Ö–∫–∞—Ä—Ç—É
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TechCardsPage;
