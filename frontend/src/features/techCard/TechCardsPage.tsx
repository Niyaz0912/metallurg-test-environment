// frontend/src/features/techCards/TechCardsPage.tsx
import React, { useState, useEffect } from 'react';
import { useAuth } from '../auth/hooks/useAuth';
import { fetchTechCards, deleteTechCard, updateTechCardStatus } from '../../shared/api/techCardsApi';
import TechCardList from './components/TechCardList';
import TechCardForm from './components/TechCardForm';
import TechCardViewer from './components/TechCardViewer';

interface TechCard {
  id: number;
  productName: string;
  partNumber?: string;
  description?: string;
  drawingUrl?: string;
  specifications?: any;
  productionStages?: any[];
  estimatedTimePerUnit?: number;
  notes?: string;
  status: 'draft' | 'active' | 'archived';
  version: string;
  totalUsageCount: number;
  totalProducedQuantity: number;
  createdAt: string;
  updatedAt: string;
  creator?: {
    id: number;
    firstName: string;
    lastName: string;
  };
  executions?: any[];
}

const TechCardsPage: React.FC = () => {
  const { user } = useAuth();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [techCards, setTechCards] = useState<TechCard[]>([]);
  const [filteredCards, setFilteredCards] = useState<TechCard[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  // –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [showEditForm, setShowEditForm] = useState(false);
  const [showViewer, setShowViewer] = useState(false);
  const [selectedCard, setSelectedCard] = useState<TechCard | null>(null);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);
  
  // –§–∏–ª—å—Ç—Ä—ã –∏ –ø–æ–∏—Å–∫
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  
  // –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
  const canManage = user?.role === 'master' || user?.role === 'admin';
  const canView = ['master', 'admin', 'employee', 'director'].includes(user?.role || '');

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  const loadTechCards = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await fetchTechCards();
      setTechCards(data);
      setFilteredCards(data);
    } catch (err) {
      setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç');
      console.error('Error loading tech cards:', err);
    } finally {
      setLoading(false);
    }
  };

  // –ü–µ—Ä–≤–∏—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  useEffect(() => {
    if (canView) {
      loadTechCards();
    }
  }, [canView]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –ø–æ–∏—Å–∫
  useEffect(() => {
    let filtered = techCards;

    // –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –∞—Ä—Ç–∏–∫—É–ª—É
    if (searchQuery) {
      filtered = filtered.filter(card => 
        card.productName.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (card.partNumber && card.partNumber.toLowerCase().includes(searchQuery.toLowerCase()))
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (statusFilter !== 'all') {
      filtered = filtered.filter(card => card.status === statusFilter);
    }

    setFilteredCards(filtered);
  }, [searchQuery, statusFilter, techCards]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  const handleCreateCard = () => {
    setSelectedCard(null);
    setShowCreateForm(true);
    setShowEditForm(false);
    setShowViewer(false);
  };

  const handleEditCard = (card: TechCard) => {
    setSelectedCard(card);
    setShowEditForm(true);
    setShowCreateForm(false);
    setShowViewer(false);
  };

  const handleViewCard = (card: TechCard) => {
    setSelectedCard(card);
    setShowViewer(true);
    setShowCreateForm(false);
    setShowEditForm(false);
  };

  const handleDeleteCard = (card: TechCard) => {
    setSelectedCard(card);
    setShowDeleteConfirm(true);
  };

  const handleConfirmDelete = async () => {
    if (!selectedCard) return;
    
    try {
      await deleteTechCard(selectedCard.id.toString());
      await loadTechCards();
      setShowDeleteConfirm(false);
      setSelectedCard(null);
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Ö–∫–∞—Ä—Ç—ã');
      console.error('Error deleting tech card:', err);
    }
  };

  const handleStatusChange = async (card: TechCard, newStatus: 'draft' | 'active' | 'archived') => {
    try {
      await updateTechCardStatus(card.id.toString(), newStatus);
      await loadTechCards();
    } catch (err) {
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞');
      console.error('Error updating status:', err);
    }
  };

  const handleFormSuccess = () => {
    setShowCreateForm(false);
    setShowEditForm(false);
    setSelectedCard(null);
    loadTechCards();
  };

  const closeAllModals = () => {
    setShowCreateForm(false);
    setShowEditForm(false);
    setShowViewer(false);
    setShowDeleteConfirm(false);
    setSelectedCard(null);
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  if (!canView) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="text-center">
          <h2 className="text-xl font-semibold text-gray-700">–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω</h2>
          <p className="text-gray-500">–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç</p>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="bg-indigo-50 border-l-4 border-indigo-400 p-4">
        <h1 className="text-2xl font-bold text-indigo-900">
          üîß –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
        </h1>
        <p className="text-indigo-700 mt-1">
          –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –∫–∞—Ä—Ç–∞–º–∏ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
        </p>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <div className="bg-white rounded-lg shadow p-6">
        {/* –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4 mb-6">
          <div className="flex flex-col sm:flex-row gap-4 flex-1">
            {/* –ü–æ–∏—Å–∫ */}
            <div className="flex-1">
              <input
                type="text"
                placeholder="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª—É..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            
            {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É */}
            <select
              value={statusFilter}
              onChange={(e) => setStatusFilter(e.target.value)}
              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
              <option value="draft">–ß–µ—Ä–Ω–æ–≤–∏–∫</option>
              <option value="active">–ê–∫—Ç–∏–≤–Ω—ã–µ</option>
              <option value="archived">–ê—Ä—Ö–∏–≤</option>
            </select>
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
          {canManage && (
            <div className="flex gap-2">
              <button
                onClick={handleCreateCard}
                className="px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors"
              >
                + –°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–∫–∞—Ä—Ç—É
              </button>
            </div>
          )}
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-1 sm:grid-cols-4 gap-4 mb-6">
          <div className="bg-gray-50 rounded-lg p-4">
            <h3 className="text-sm font-medium text-gray-500">–í—Å–µ–≥–æ</h3>
            <p className="text-2xl font-bold text-gray-900">{techCards.length}</p>
          </div>
          <div className="bg-yellow-50 rounded-lg p-4">
            <h3 className="text-sm font-medium text-yellow-600">–ß–µ—Ä–Ω–æ–≤–∏–∫–∏</h3>
            <p className="text-2xl font-bold text-yellow-700">
              {techCards.filter(c => c.status === 'draft').length}
            </p>
          </div>
          <div className="bg-green-50 rounded-lg p-4">
            <h3 className="text-sm font-medium text-green-600">–ê–∫—Ç–∏–≤–Ω—ã–µ</h3>
            <p className="text-2xl font-bold text-green-700">
              {techCards.filter(c => c.status === 'active').length}
            </p>
          </div>
          <div className="bg-gray-50 rounded-lg p-4">
            <h3 className="text-sm font-medium text-gray-500">–ê—Ä—Ö–∏–≤</h3>
            <p className="text-2xl font-bold text-gray-600">
              {techCards.filter(c => c.status === 'archived').length}
            </p>
          </div>
        </div>

        {/* –°–ø–∏—Å–æ–∫ —Ç–µ—Ö–∫–∞—Ä—Ç */}
        {loading ? (
          <div className="flex justify-center items-center h-32">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-500"></div>
          </div>
        ) : error ? (
          <div className="text-center py-8">
            <p className="text-red-600">{error}</p>
            <button
              onClick={loadTechCards}
              className="mt-2 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
            >
              –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É
            </button>
          </div>
        ) : filteredCards.length === 0 ? (
          <div className="text-center py-8">
            <p className="text-gray-500">
              {searchQuery || statusFilter !== 'all' 
                ? '–¢–µ—Ö–∫–∞—Ä—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' 
                : '–ü–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç'}
            </p>
            {canManage && !searchQuery && statusFilter === 'all' && (
              <button
                onClick={handleCreateCard}
                className="mt-2 px-4 py-2 bg-indigo-600 text-white rounded hover:bg-indigo-700"
              >
                –°–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—É—é —Ç–µ—Ö–∫–∞—Ä—Ç—É
              </button>
            )}
          </div>
        ) : (
          <TechCardList
            techCards={filteredCards}
            onView={handleViewCard}
            onEdit={canManage ? handleEditCard : undefined}
            onDelete={canManage ? handleDeleteCard : undefined}
            onStatusChange={canManage ? handleStatusChange : undefined}
          />
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ */}
      {showCreateForm && (
        <TechCardForm
          onSuccess={handleFormSuccess}
          onCancel={closeAllModals}
        />
      )}

      {showEditForm && selectedCard && (
        <TechCardForm
          techCard={selectedCard}
          onSuccess={handleFormSuccess}
          onCancel={closeAllModals}
        />
      )}

      {showViewer && selectedCard && (
        <TechCardViewer
          techCard={selectedCard}
          onClose={closeAllModals}
          onEdit={canManage ? () => handleEditCard(selectedCard) : undefined}
        />
      )}

      {/* –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è */}
      {showDeleteConfirm && selectedCard && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
            <h3 className="text-lg font-bold text-red-600 mb-4">
              ‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            </h3>
            <p className="text-gray-700 mb-6">
              –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ—Ö–∫–∞—Ä—Ç—É <strong>"{selectedCard.productName}"</strong>?
              <br />
              <br />
              <span className="text-red-600 font-medium">
                –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!
              </span>
            </p>
            <div className="flex gap-3">
              <button
                onClick={() => setShowDeleteConfirm(false)}
                className="flex-1 px-4 py-2 bg-gray-300 text-gray-700 rounded hover:bg-gray-400"
              >
                –û—Ç–º–µ–Ω–∏—Ç—å
              </button>
              <button
                onClick={handleConfirmDelete}
                className="flex-1 px-4 py-2 bg-red-600 text-white rounded hover:bg-red-700"
              >
                –£–¥–∞–ª–∏—Ç—å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default TechCardsPage;
