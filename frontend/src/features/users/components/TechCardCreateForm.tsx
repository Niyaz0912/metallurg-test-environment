// frontend/src/features/users/components/TechCardCreateForm.tsx
import React, { useState } from 'react';
import { 
  createTechCard, 
  uploadPdf,
  type CreateTechCardData,
  type TechCardPriority,
  type TechCardStatus
} from '../../../shared/api/techCardsApi';

interface TechCardCreateFormProps {
  onCardCreated: () => void;
}

const TechCardCreateForm: React.FC<TechCardCreateFormProps> = ({ onCardCreated }) => {
  const [formData, setFormData] = useState<CreateTechCardData & { file?: File }>({
    customer: '',
    order: '',
    productName: '',
    partNumber: '',
    quantity: 1,
    description: '',
    priority: 'medium',
    status: 'draft',
    plannedEndDate: '',
    notes: '',
    file: undefined
  });
  const [loading, setLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.customer || !formData.order || !formData.productName || !formData.quantity) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    try {
      setLoading(true);
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Ö–∫–∞—Ä—Ç—É
      const newTechCard = await createTechCard({
        customer: formData.customer,
        order: formData.order,
        productName: formData.productName,
        partNumber: formData.partNumber || undefined,
        quantity: Number(formData.quantity),
        description: formData.description || undefined,
        priority: formData.priority,
        status: formData.status,
        plannedEndDate: formData.plannedEndDate || undefined,
        notes: formData.notes || undefined
      });

      // –ó–∞–≥—Ä—É–∂–∞–µ–º PDF —Ñ–∞–π–ª –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω
      if (formData.file) {
        try {
          await uploadPdf(newTechCard.id.toString(), formData.file);
        } catch (uploadError) {
          console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', uploadError);
          alert('–¢–µ—Ö–∫–∞—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞, –Ω–æ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ.');
        }
      }

      onCardCreated();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Ö–∫–∞—Ä—Ç—ã:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Ö–∫–∞—Ä—Ç—ã');
    } finally {
      setLoading(false);
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      if (file.size > 10 * 1024 * 1024) { // 10MB
        alert('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 10MB');
        return;
      }
      if (file.type !== 'application/pdf') {
        alert('–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã');
        return;
      }
      setFormData({ ...formData, file });
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <h3 className="text-lg font-semibold text-gray-900">–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–µ—Ö–∫–∞—Ä—Ç—ã</h3>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="space-y-4">
          <h4 className="font-medium text-gray-900">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ó–∞–∫–∞–∑—á–∏–∫ *
            </label>
            <input
              type="text"
              value={formData.customer}
              onChange={(e) => setFormData({ ...formData, customer: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ *
            </label>
            <input
              type="text"
              value={formData.order}
              onChange={(e) => setFormData({ ...formData, order: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ *
            </label>
            <input
              type="text"
              value={formData.productName}
              onChange={(e) => setFormData({ ...formData, productName: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ê—Ä—Ç–∏–∫—É–ª
            </label>
            <input
              type="text"
              value={formData.partNumber}
              onChange={(e) => setFormData({ ...formData, partNumber: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ *
            </label>
            <input
              type="number"
              value={formData.quantity}
              onChange={(e) => setFormData({ ...formData, quantity: Number(e.target.value) })}
              min="1"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
              required
            />
          </div>
        </div>

        {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã */}
        <div className="space-y-4">
          <h4 className="font-medium text-gray-900">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</h4>
          
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –°—Ç–∞—Ç—É—Å
            </label>
            <select
              value={formData.status}
              onChange={(e) => setFormData({ ...formData, status: e.target.value as TechCardStatus })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="draft">–ß–µ—Ä–Ω–æ–≤–∏–∫</option>
              <option value="active">–ê–∫—Ç–∏–≤–Ω–∞—è</option>
              <option value="archived">–ê—Ä—Ö–∏–≤</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            </label>
            <select
              value={formData.priority}
              onChange={(e) => setFormData({ ...formData, priority: e.target.value as TechCardPriority })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="low">üü¢ –ù–∏–∑–∫–∏–π</option>
              <option value="medium">üü° –°—Ä–µ–¥–Ω–∏–π</option>
              <option value="high">üü† –í—ã—Å–æ–∫–∏–π</option>
              <option value="urgent">üî¥ –°—Ä–æ—á–Ω—ã–π</option>
            </select>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –ü–ª–∞–Ω–æ–≤–∞—è –¥–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            </label>
            <input
              type="date"
              value={formData.plannedEndDate}
              onChange={(e) => setFormData({ ...formData, plannedEndDate: e.target.value })}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              PDF —Ñ–∞–π–ª —Ç–µ—Ö–∫–∞—Ä—Ç—ã
            </label>
            <input
              type="file"
              accept=".pdf"
              onChange={handleFileChange}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            />
            {formData.file && (
              <p className="text-sm text-green-600 mt-1">
                –í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª: {formData.file.name}
              </p>
            )}
          </div>
        </div>
      </div>

      {/* –û–ø–∏—Å–∞–Ω–∏–µ –∏ –∑–∞–º–µ—Ç–∫–∏ */}
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –û–ø–∏—Å–∞–Ω–∏–µ
          </label>
          <textarea
            value={formData.description}
            onChange={(e) => setFormData({ ...formData, description: e.target.value })}
            rows={3}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–¥–µ–ª–∏—è..."
          />
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            –ó–∞–º–µ—Ç–∫–∏
          </label>
          <textarea
            value={formData.notes}
            onChange={(e) => setFormData({ ...formData, notes: e.target.value })}
            rows={3}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
            placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏..."
          />
        </div>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ */}
      <div className="flex justify-end space-x-3">
        <button
          type="submit"
          disabled={loading}
          className="px-6 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–∫–∞—Ä—Ç—É'}
        </button>
      </div>
    </form>
  );
};

export default TechCardCreateForm;
