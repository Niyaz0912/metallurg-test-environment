// frontend/src/features/assignments/components/ExcelUploader.tsx
import React, { useState } from 'react';

interface UploadResult {
    summary: {
        total: number;
        created: number;
        errors: number;
        skipped: number;
    };
    details: {
        success: Array<{ row: number; operator: string; machine: string; assignmentId: number }>;
        errors: Array<{ row: number; error: string; data: Record<string, unknown> }>;
        skipped: Array<{ row: number; reason: string }>;
    };
}

interface ExcelUploaderProps {
    onUploadComplete: () => void;
}

const ExcelUploader: React.FC<ExcelUploaderProps> = ({ onUploadComplete }) => {
    const [file, setFile] = useState<File | null>(null);
    const [uploading, setUploading] = useState(false);
    const [result, setResult] = useState<UploadResult | null>(null);
    const [error, setError] = useState<string>('');

    const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
        const selectedFile = e.target.files?.[0];
        if (selectedFile) {
            const allowedExtensions = ['.xlsx', '.xls'];
            const fileExtension = selectedFile.name.toLowerCase().slice(selectedFile.name.lastIndexOf('.'));

            if (allowedExtensions.includes(fileExtension)) {
                setFile(selectedFile);
                setError('');
                setResult(null);
            } else {
                setError('–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª (.xlsx –∏–ª–∏ .xls)');
                e.target.value = '';
            }
        }
    };

    const handleUpload = async () => {
        if (!file) {
            setError('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏');
            return;
        }

        setUploading(true);
        setError('');

        try {
            const formData = new FormData();
            formData.append('excelFile', file);

            const token = localStorage.getItem('token');
            const response = await fetch('http://localhost:3001/api/assignments/upload-excel', {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${token}`
                },
                body: formData
            });

            if (response.ok) {
                const data = await response.json();
                setResult(data);
                onUploadComplete();

                // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
                setFile(null);
                const fileInput = document.getElementById('excel-file') as HTMLInputElement;
                if (fileInput) fileInput.value = '';

            } else {
                const errorData = await response.json().catch(() => ({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' }));
                setError(errorData.message || `–û—à–∏–±–∫–∞ ${response.status}`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
            setError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º');
        } finally {
            setUploading(false);
        }
    };

    return (
        <div className="bg-white border-2 border-dashed border-gray-300 rounded-lg p-6">
            <div className="text-center">
                <div className="text-4xl mb-4">üìä</div>
                <h3 className="text-lg font-semibold mb-2">–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π</h3>
                <p className="text-gray-600 mb-4">
                    –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Å–º–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è—Ö –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π
                </p>

                {/* –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ */}
                <div className="mb-4">
                    <input
                        id="excel-file"
                        type="file"
                        accept=".xlsx,.xls"
                        onChange={handleFileSelect}
                        className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
                    />
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ */}
                {file && (
                    <div className="mb-4 p-3 bg-blue-50 rounded">
                        <div className="text-sm text-blue-800">
                            <strong>–í—ã–±—Ä–∞–Ω —Ñ–∞–π–ª:</strong> {file.name}
                        </div>
                        <div className="text-xs text-blue-600">
                            –†–∞–∑–º–µ—Ä: {(file.size / 1024).toFixed(1)} KB
                        </div>
                    </div>
                )}

                {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ */}
                <button
                    onClick={handleUpload}
                    disabled={!file || uploading}
                    className={`px-6 py-2 rounded font-medium ${!file || uploading
                            ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                            : 'bg-green-600 text-white hover:bg-green-700'
                        }`}
                >
                    {uploading ? '–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞...' : '–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è'}
                </button>

                {/* –û—à–∏–±–∫–∏ */}
                {error && (
                    <div className="mt-4 p-3 bg-red-50 border border-red-200 rounded">
                        <div className="text-red-800 text-sm">{error}</div>
                    </div>
                )}

                {/* –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏ */}
                {result && (
                    <div className="mt-6 text-left">
                        <h4 className="font-semibold mb-3">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:</h4>

                        {/* –°–≤–æ–¥–∫–∞ */}
                        <div className="grid grid-cols-4 gap-4 mb-4">
                            <div className="bg-blue-50 p-3 rounded text-center">
                                <div className="text-2xl font-bold text-blue-600">{result.summary.total}</div>
                                <div className="text-xs text-blue-800">–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫</div>
                            </div>
                            <div className="bg-green-50 p-3 rounded text-center">
                                <div className="text-2xl font-bold text-green-600">{result.summary.created}</div>
                                <div className="text-xs text-green-800">–°–æ–∑–¥–∞–Ω–æ</div>
                            </div>
                            <div className="bg-red-50 p-3 rounded text-center">
                                <div className="text-2xl font-bold text-red-600">{result.summary.errors}</div>
                                <div className="text-xs text-red-800">–û—à–∏–±–∫–∏</div>
                            </div>
                            <div className="bg-yellow-50 p-3 rounded text-center">
                                <div className="text-2xl font-bold text-yellow-600">{result.summary.skipped}</div>
                                <div className="text-xs text-yellow-800">–ü—Ä–æ–ø—É—â–µ–Ω–æ</div>
                            </div>
                        </div>

                        {/* –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ */}
                        {result.details.success.length > 0 && (
                            <div className="mb-4">
                                <h5 className="font-medium text-green-800 mb-2">‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã ({result.details.success.length}):</h5>
                                <div className="max-h-32 overflow-y-auto bg-green-50 p-2 rounded text-xs">
                                    {result.details.success.map((item, index) => (
                                        <div key={index} className="text-green-700">
                                            –°—Ç—Ä–æ–∫–∞ {item.row}: {item.operator} ‚Üí {item.machine} (ID: {item.assignmentId})
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}

                        {/* –û—à–∏–±–∫–∏ */}
                        {result.details.errors.length > 0 && (
                            <div className="mb-4">
                                <h5 className="font-medium text-red-800 mb-2">‚ùå –û—à–∏–±–∫–∏ ({result.details.errors.length}):</h5>
                                <div className="max-h-32 overflow-y-auto bg-red-50 p-2 rounded text-xs">
                                    {result.details.errors.map((item, index) => (
                                        <div key={index} className="text-red-700">
                                            –°—Ç—Ä–æ–∫–∞ {item.row}: {item.error}
                                        </div>
                                    ))}
                                </div>
                            </div>
                        )}
                    </div>
                )}

                {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —Ñ–æ—Ä–º–∞—Ç—É */}
                <div className="mt-6 text-left text-xs text-gray-600">
                    <h5 className="font-medium mb-2">üìã –§–æ—Ä–º–∞—Ç Excel —Ñ–∞–π–ª–∞:</h5>
                    <ul className="list-disc list-inside space-y-1">
                        <li><strong>–ó–∞–∫–∞–∑—á–∏–∫</strong> - –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏-–∑–∞–∫–∞–∑—á–∏–∫–∞</li>
                        <li><strong>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞</strong> - –Ω–æ–º–µ—Ä/–∫–æ–¥ –∑–∞–∫–∞–∑–∞</li>
                        <li><strong>–î–∞—Ç–∞ —Å–º–µ–Ω—ã</strong> - –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î</li>
                        <li><strong>–¢–∏–ø —Å–º–µ–Ω—ã</strong> - "–¥–µ–Ω—å" –∏–ª–∏ "–Ω–æ—á—å"</li>
                        <li><strong>–õ–æ–≥–∏–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</strong> - –ª–æ–≥–∏–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</li>
                        <li><strong>–ü–ª–∞–Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ</strong> - —á–∏—Å–ª–æ –¥–µ—Ç–∞–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</li>
                        <li><strong>–ù–æ–º–µ—Ä —Å—Ç–∞–Ω–∫–∞</strong> - –∫–æ–¥/–Ω–æ–º–µ—Ä –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è</li>
                    </ul>
                </div>
            </div>
        </div>
    );
};

export default ExcelUploader;

