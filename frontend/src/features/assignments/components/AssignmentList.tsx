// frontend/src/features/assignments/components/AssignmentList.tsx
import React, { useEffect, useState } from 'react';
import { Link } from 'react-router-dom';
import { fetchAssignments, updateAssignment, deleteAssignment, Assignment } from '../../../shared/api/assignmentsApi';
import { useAuth } from '../../auth/hooks/useAuth';

interface AssignmentListProps {
  userRole: string;
}

const AssignmentList: React.FC<AssignmentListProps> = ({ userRole }) => {
  // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–û–°–¢–û–Ø–ù–ò–ô
  const [assignments, setAssignments] = useState<Assignment[]>([]); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [updatingIds, setUpdatingIds] = useState<Set<number>>(new Set());
  
  const { user } = useAuth();
  
  const canManageAllAssignments = userRole === 'master' || userRole === 'admin';

  useEffect(() => {
    loadAssignments();
  }, []);

  // ‚úÖ –£–õ–£–ß–®–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –° –û–ë–†–ê–ë–û–¢–ö–û–ô –†–ê–ó–õ–ò–ß–ù–´–• –§–û–†–ú–ê–¢–û–í –û–¢–í–ï–¢–ê
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø loadAssignments
const loadAssignments = async () => {
  try {
    setLoading(true);
    setError(null);
    
    const response = await fetchAssignments();
    console.log('üì¶ –û—Ç–≤–µ—Ç –æ—Ç API fetchAssignments:', response);
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ response.data –≤–º–µ—Å—Ç–æ response.assignments
    if (response && typeof response === 'object') {
      // –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º data (—Ç–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç)
      if (response.data && Array.isArray(response.data)) {
        setAssignments(response.data);
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –∏–∑ response.data:', response.data.length);
      }
      // ‚ùå –£–î–ê–õ–ï–ù–û: –±–ª–æ–∫ —Å response.assignments
      // else if (response.assignments && Array.isArray(response.assignments)) {
      //   setAssignments(response.assignments);
      //   console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –∏–∑ response.assignments:', response.assignments.length);
      // }
      // –ï—Å–ª–∏ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é  
      else if (Array.isArray(response)) {
        setAssignments(response);
        console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π –∏–∑ response:', response.length);
      }
      // –ï—Å–ª–∏ –Ω–∏ —Ç–æ, –Ω–∏ –¥—Ä—É–≥–æ–µ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
      else {
        console.warn('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:', response);
        setAssignments([]);
      }
    } else {
      console.warn('‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç');
      setAssignments([]);
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', err);
    setError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.');
    setAssignments([]); // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
  } finally {
    setLoading(false);
  }
};


  const handleStatusUpdate = async (id: number, newStatus: 'assigned' | 'completed') => {
    if (updatingIds.has(id)) return;
    
    setUpdatingIds(prev => new Set(prev).add(id));
    
    try {
      await updateAssignment(id, { status: newStatus });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setAssignments(prev => 
        prev.map(assignment => 
          assignment.id === id 
            ? { ...assignment, status: newStatus }
            : assignment
        )
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞–Ω–∏—è');
    } finally {
      setUpdatingIds(prev => {
        const newSet = new Set(prev);
        newSet.delete(id);
        return newSet;
      });
    }
  };

  const handleActualQuantityUpdate = async (id: number, actualQuantity: number) => {
    if (updatingIds.has(id)) return;
    
    setUpdatingIds(prev => new Set(prev).add(id));
    
    try {
      await updateAssignment(id, { actualQuantity });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setAssignments(prev => 
        prev.map(assignment => 
          assignment.id === id 
            ? { ...assignment, actualQuantity }
            : assignment
        )
      );
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞');
    } finally {
      setUpdatingIds(prev => {
        const newSet = new Set(prev);
        newSet.delete(id);
        return newSet;
      });
    }
  };

  const handleDelete = async (id: number) => {
    if (!canManageAllAssignments) return;
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ?')) return;
    
    try {
      await deleteAssignment(id);
      setAssignments(prev => prev.filter(assignment => assignment.id !== id));
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', error);
      alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è');
    }
  };

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('ru-RU');
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-green-100 text-green-800';
      case 'assigned': return 'bg-yellow-100 text-yellow-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getShiftTypeText = (shiftType: string) => {
    return shiftType === 'day' ? '–î–Ω–µ–≤–Ω–∞—è' : '–ù–æ—á–Ω–∞—è';
  };

  // ‚úÖ –ó–ê–©–ò–©–ï–ù–ù–´–ô –†–ï–ù–î–ï–†–ò–ù–ì –° –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ú–ò –ü–†–û–í–ï–†–ö–ê–ú–ò
  if (loading) {
    return (
      <div className="flex justify-center items-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-500 mr-3"></div>
        <div className="text-lg">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center p-8">
        <div className="text-red-600 mb-4">‚ùå {error}</div>
        <button 
          onClick={loadAssignments}
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
        >
          üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
      </div>
    );
  }

  // ‚úÖ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–©–ò–¢–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–î map()
  if (!Array.isArray(assignments)) {
    console.error('‚ùå assignments –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º:', assignments);
    return (
      <div className="text-center p-8">
        <div className="text-red-600 mb-4">–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π</div>
        <button 
          onClick={loadAssignments}
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å
        </button>
      </div>
    );
  }

  if (assignments.length === 0) {
    return (
      <div className="text-center p-8 text-gray-500">
        <div className="text-6xl mb-4">üìã</div>
        <div className="text-xl mb-2">–ó–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
        <p className="text-sm mt-2">
          {canManageAllAssignments 
            ? '–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –≤—ã—à–µ'
            : '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π'}
        </p>
        <button 
          onClick={loadAssignments}
          className="mt-4 text-blue-600 hover:text-blue-800 text-sm"
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫
        </button>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="text-sm text-gray-600 mb-4 flex justify-between items-center">
        <span>–ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: <span className="font-semibold">{assignments.length}</span></span>
        <button 
          onClick={loadAssignments}
          className="text-blue-600 hover:text-blue-800 text-xs"
          disabled={loading}
        >
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </button>
      </div>

      {/* –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Ç–∞–±–ª–∏—Ü–∞ */}
      <div className="hidden lg:block">
        <div className="overflow-x-auto">
          <table className="min-w-full bg-white border border-gray-200 rounded-lg">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  –ó–∞–¥–∞—á–∞
                </th>
                {canManageAllAssignments && (
                  <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                    –û–ø–µ—Ä–∞—Ç–æ—Ä
                  </th>
                )}
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  –°–º–µ–Ω–∞
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  –ú–∞—à–∏–Ω–∞
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  –°—Ç–∞—Ç—É—Å
                </th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase">
                  –î–µ–π—Å—Ç–≤–∏—è
                </th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {assignments.map((assignment) => (
                <tr key={assignment.id} className="hover:bg-gray-50">
                  <td className="px-4 py-4">
                    <div className="font-medium text-gray-900 mb-1">
                      {assignment.detailName || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
                    </div>
                    <div className="text-sm text-gray-600">
                      {assignment.taskDescription}
                    </div>
                    {assignment.customerName && (
                      <div className="text-xs text-blue-600 mt-1">
                        –ó–∞–∫–∞–∑—á–∏–∫: {assignment.customerName}
                      </div>
                    )}
                    {/* ‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É */}
                    {assignment.techCardId && (
                      <div className="mt-2">
                        <Link 
                          to={`/techcards/${assignment.techCardId}`}
                          className="text-blue-600 hover:text-blue-800 text-xs font-medium inline-flex items-center"
                        >
                          üîß –¢–µ—Ö–∫–∞—Ä—Ç–∞: {assignment.techCard?.productName || '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'}
                        </Link>
                      </div>
                    )}
                  </td>
                  
                  {canManageAllAssignments && (
                    <td className="px-4 py-4">
                      <div className="text-sm font-medium text-gray-900">
                        {assignment.operator 
                          ? `${assignment.operator.firstName} ${assignment.operator.lastName}`
                          : `ID: ${assignment.operatorId}`}
                      </div>
                    </td>
                  )}
                  
                  <td className="px-4 py-4">
                    <div className="text-sm text-gray-900">
                      {formatDate(assignment.shiftDate)}
                    </div>
                    <div className="text-xs text-gray-500">
                      {getShiftTypeText(assignment.shiftType)}
                    </div>
                  </td>
                  
                  <td className="px-4 py-4">
                    <div className="text-sm font-mono text-gray-900">
                      {assignment.machineNumber}
                    </div>
                  </td>
                  
                  <td className="px-4 py-4">
                    <div className="text-sm text-gray-900">
                      –ü–ª–∞–Ω: <span className="font-semibold">{assignment.plannedQuantity}</span>
                    </div>
                    {assignment.status === 'completed' && assignment.actualQuantity !== null ? (
                      <div className="text-sm text-green-600">
                        –§–∞–∫—Ç: <span className="font-semibold">{assignment.actualQuantity}</span>
                      </div>
                    ) : user?.id === assignment.operatorId && (
                      <input
                        type="number"
                        min="0"
                        placeholder="–§–∞–∫—Ç"
                        className="mt-1 w-20 px-2 py-1 text-xs border border-gray-300 rounded"
                        onBlur={(e) => {
                          const value = parseInt(e.target.value);
                          if (value >= 0) {
                            handleActualQuantityUpdate(assignment.id, value);
                          }
                        }}
                        disabled={updatingIds.has(assignment.id)}
                      />
                    )}
                  </td>
                  
                  <td className="px-4 py-4">
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(assignment.status)}`}>
                      {assignment.status === 'assigned' ? '–ù–∞–∑–Ω–∞—á–µ–Ω–æ' : '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'}
                    </span>
                  </td>
                  
                  <td className="px-4 py-4 text-sm">
                    <div className="space-x-2">
                      {user?.id === assignment.operatorId && assignment.status === 'assigned' && (
                        <button
                          onClick={() => handleStatusUpdate(assignment.id, 'completed')}
                          disabled={updatingIds.has(assignment.id)}
                          className="text-green-600 hover:text-green-900 disabled:opacity-50"
                        >
                          {updatingIds.has(assignment.id) ? '‚è≥' : '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å'}
                        </button>
                      )}
                      
                      {canManageAllAssignments && (
                        <button
                          onClick={() => handleDelete(assignment.id)}
                          className="text-red-600 hover:text-red-900"
                        >
                          üóëÔ∏è –£–¥–∞–ª–∏—Ç—å
                        </button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>

      {/* –ú–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <div className="lg:hidden space-y-4">
        {assignments.map((assignment) => (
          <div key={assignment.id} className="bg-white border border-gray-200 rounded-lg p-4 shadow-sm">
            <div className="flex justify-between items-start mb-2">
              <div className="font-medium text-gray-900">
                {assignment.detailName || '–ó–∞–¥–∞–Ω–∏–µ'}
              </div>
              <span className={`px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(assignment.status)}`}>
                {assignment.status === 'assigned' ? '–ù–∞–∑–Ω–∞—á–µ–Ω–æ' : '–í—ã–ø–æ–ª–Ω–µ–Ω–æ'}
              </span>
            </div>
            
            <div className="text-sm text-gray-600 mb-3">
              {assignment.taskDescription}
            </div>
            
            <div className="grid grid-cols-2 gap-2 text-sm mb-3">
              <div>
                <span className="text-gray-500">–°–º–µ–Ω–∞:</span> {formatDate(assignment.shiftDate)}
              </div>
              <div>
                <span className="text-gray-500">–¢–∏–ø:</span> {getShiftTypeText(assignment.shiftType)}
              </div>
              <div>
                <span className="text-gray-500">–ú–∞—à–∏–Ω–∞:</span> {assignment.machineNumber}
              </div>
              <div>
                <span className="text-gray-500">–ü–ª–∞–Ω:</span> {assignment.plannedQuantity}
              </div>
            </div>

            {assignment.customerName && (
              <div className="text-xs text-blue-600 mb-2">
                –ó–∞–∫–∞–∑—á–∏–∫: {assignment.customerName}
              </div>
            )}
            
            {/* ‚úÖ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É –≤ –º–æ–±–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ */}
            {assignment.techCardId && (
              <div className="mb-3">
                <Link 
                  to={`/techcards/${assignment.techCardId}`}
                  className="text-blue-600 hover:text-blue-800 text-sm font-medium inline-flex items-center"
                >
                  üîß –¢–µ—Ö–∫–∞—Ä—Ç–∞: {assignment.techCard?.productName || '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å'}
                </Link>
              </div>
            )}
            
            {user?.id === assignment.operatorId && assignment.status === 'assigned' && (
              <div className="flex space-x-2">
                <button
                  onClick={() => handleStatusUpdate(assignment.id, 'completed')}
                  disabled={updatingIds.has(assignment.id)}
                  className="flex-1 bg-green-600 text-white px-3 py-2 rounded text-sm hover:bg-green-700 disabled:opacity-50"
                >
                  {updatingIds.has(assignment.id) ? '‚è≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...' : '‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º'}
                </button>
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};

export default AssignmentList;

